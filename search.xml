<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>日志框架logback使用方法</title>
      <link href="/2022/09/06/%E6%9C%80%E5%85%A8%E7%9A%84%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%A7%E5%85%A8/"/>
      <url>/2022/09/06/%E6%9C%80%E5%85%A8%E7%9A%84%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="常用正则表达式大全"><a href="#常用正则表达式大全" class="headerlink" title="常用正则表达式大全"></a>常用正则表达式大全</h1><h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"> 1 数字：^[0-9]*$</span><br><span class="line"> 2 n位的数字：^\d{n}$</span><br><span class="line"> 3 至少n位的数字：^\d{n,}$</span><br><span class="line"> 4 m-n位的数字：^\d{m,n}$</span><br><span class="line"> 5 零和非零开头的数字：^(0|[1-9][0-9]*)$</span><br><span class="line"> 6 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</span><br><span class="line"> 7 带1-2位小数的正数或负数：^(\-)?\d+(\.\d{1,2})?$</span><br><span class="line"> 8 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line"> 9 有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</span><br><span class="line">10 有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</span><br><span class="line">11 非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$</span><br><span class="line">12 非零的负整数：^\-[1-9][]0-9"*$ 或 ^-[1-9]\d*$</span><br><span class="line">13 非负整数：^\d+$ 或 ^[1-9]\d*|0$</span><br><span class="line">14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span><br><span class="line">15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</span><br><span class="line">16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</span><br><span class="line">17 正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span><br><span class="line">18 负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span><br><span class="line">19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</span><br></pre></td></tr></tbody></table></figure><h2 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"> 1 汉字：^[\u4e00-\u9fa5]{0,}$</span><br><span class="line"> 2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</span><br><span class="line"> 3 长度为3-20的所有字符：^.{3,20}$</span><br><span class="line"> 4 由26个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class="line"> 5 由26个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class="line"> 6 由26个小写英文字母组成的字符串：^[a-z]+$</span><br><span class="line"> 7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</span><br><span class="line"> 8 由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$</span><br><span class="line"> 9 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</span><br><span class="line">10 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</span><br><span class="line">11 可以输入含有^%&amp;',;=?$\"等字符：[^%&amp;',;=?$\x22]+</span><br><span class="line">12 禁止输入含有~的字符：[^~\x22]+</span><br></pre></td></tr></tbody></table></figure><h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"> 1 Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br><span class="line"> 2 域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</span><br><span class="line"> 3 InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</span><br><span class="line"> 4 手机号码：^(13[0-9]|14[0-9]|15[0-9]|16[0-9]|17[0-9]|18[0-9]|19[0-9])\d{8}$ (由于工信部放号段不定时，所以建议使用泛解析 ^([1][3,4,5,6,7,8,9])\d{9}$) 5 电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$ </span><br><span class="line"> 6 国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}  7 18位身份证号码(数字、字母x结尾)：^((\d{18})|([0-9x]{18})|([0-9X]{18}))$ 8 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</span><br><span class="line"> 9 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</span><br><span class="line">10 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$  </span><br><span class="line">11 日期格式：^\d{4}-\d{1,2}-\d{1,2}</span><br><span class="line">12 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</span><br><span class="line">13 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ </span><br><span class="line">14 钱的输入格式：</span><br><span class="line">15    1.有四种钱的表示形式我们可以接受:"10000.00" 和 "10,000.00", 和没有 "分" 的 "10000" 和 "10,000"：^[1-9][0-9]*$ </span><br><span class="line">16    2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符"0"不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ </span><br><span class="line">17    3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ </span><br><span class="line">18    4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ </span><br><span class="line">19    5.必须说明的是,小数点后面至少应该有1位数,所以"10."是不通过的,但是 "10" 和 "10.2" 是通过的：^[0-9]+(.[0-9]{2})?$ </span><br><span class="line">20    6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$ </span><br><span class="line">21    7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$ </span><br><span class="line">22    8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$ </span><br><span class="line">23    备注：这就是最终结果了,别忘了"+"可以用"*"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</span><br><span class="line">24 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</span><br><span class="line">25 中文字符的正则表达式：[\u4e00-\u9fa5]</span><br><span class="line">26 双字节字符：[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))27 空白行的正则表达式：\n\s*\r    (可以用来删除空白行)</span><br><span class="line">28 HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)29 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span><br><span class="line">30 腾讯QQ号：[1-9][0-9]{4,}    (腾讯QQ号从10000开始)</span><br><span class="line">31 中国邮政编码：[1-9]\d{5}(?!\d)    (中国邮政编码为6位数字)</span><br><span class="line">32 IP地址：\d+\.\d+\.\d+\.\d+    (提取IP地址时有用)33 IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))   </span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2022/09/02/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/09/02/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p> <strong>前言</strong></p><p>如果你想让你的博客，看起来更加美观，学习markdown是必要的，你不需要存在害怕的心理，因为markdown十分简单，就是记住几个符号就行了，不是你想象的他和学习编程语言一样复杂。</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>语法展示：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></tbody></table></figure><p>我们常常需要用到标题，在markdown中标题使用#号表示，一个#代表1级标题，一共有6个级别，他们的大小依次变小</p><img src="/2022/09/02/Markdown%E8%AF%AD%E6%B3%95/09/02/Markdown%E8%AF%AD%E6%B3%95/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7081107.png" class="" title="屏幕快照"><h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><p>在markdown里面段落没有语法，但是你还是需要注意怎么划分段落</p><p>如果你一直编辑一段文字，没有空格两个以上并且按下回车键（换行），这一段文字就自成一段</p><p>在Typora里面只需要回车换行</p><img src="/2022/09/02/Markdown%E8%AF%AD%E6%B3%95/09/02/Markdown%E8%AF%AD%E6%B3%95/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7082047.png" class="" title="image"><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p>在markdown里面也有斜体粗体，语法如下：</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">__粗体文本__</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体文本*</span>**</span></span><br><span class="line"><span class="strong">__<span class="emphasis">_粗斜体文本_</span>__</span></span><br></pre></td></tr></tbody></table></figure><p>我不太建议你用下划线，因为下划线会连在一起，不好区分数量，建议使用下面的语法形式：</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体文本*</span>**</span></span><br></pre></td></tr></tbody></table></figure><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>在你编辑很多文字之后，如果不使用分隔线，可能会让读者错乱，使用分隔线会有一种层次感。</p><p>分隔线在一行中，使用三个以上的星号、减号、下划线来建立(可以隔开)</p><p>语法：</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">----------</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">_ _ _</span></span></span><br></pre></td></tr></tbody></table></figure><img src="/2022/09/02/Markdown%E8%AF%AD%E6%B3%95/09/02/Markdown%E8%AF%AD%E6%B3%95/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7083914.png" class="" title="image"><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p>删除线就是给文本加上删除线，在文本两端使用两个波浪线<code>~</code></p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">~~文本~~</span><br></pre></td></tr></tbody></table></figure><h1 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h1><p>在markdown里面并没有关于下划线的语法，但是markdown允许你插入一些基本的<code>HTML</code>代码，下划线语法如下：</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>这是一个有下划线的文本<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>列表分为有序和无序</p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>有序列表其实很简单，就是数字加上<code>.</code>文本使用空格隔开</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></tbody></table></figure><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>无序列表使用星号<code>*</code>、加号 <code>+</code>、减号 <code>-</code>  注意需要和符号之间保持一个空格</p><p>语法如下：</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">*</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">+</span> 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br></pre></td></tr></tbody></table></figure><h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><p>有序和无序可以一起使用，只需要在子列表的选项添加四个空格</p><p>语法：</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项：</span><br><span class="line"><span class="bullet">    -</span> 子列表1</span><br><span class="line"><span class="bullet">    -</span> 子列表2</span><br><span class="line"><span class="bullet">2.</span> 第二项：</span><br><span class="line"><span class="bullet">    -</span> 子列表1</span><br><span class="line"><span class="bullet">    -</span> 子列表2</span><br></pre></td></tr></tbody></table></figure><h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><p>区块是用来引用的，比如链接或者一段文本，在段落的开头使用<code>&gt;</code>符号，使用空格，隔开文本</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&gt; 引用的内容</span><br><span class="line">&gt;</span><br><span class="line">&gt; 第二段引用的内容</span><br></pre></td></tr></tbody></table></figure><p>在引用里面也是分段落的，我们不是使用回车，而是使用<code>&gt;</code>成单个一行</p><h2 id="区块嵌套"><a href="#区块嵌套" class="headerlink" title="区块嵌套"></a>区块嵌套</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&gt; 引用</span><br><span class="line">&gt;&gt; 2</span><br><span class="line">&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;3</span><br></pre></td></tr></tbody></table></figure><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>这是一个程序员专用的语法，代码块可以展示不同语言的代码，并且有不同的高亮显示，代码块语法如下:</p><p>上下使用三个点进行包裹，最顶上的可以写上代码的类型</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">```javascript</span><br><span class="line">$(document).ready(function () {</span><br><span class="line">    alert('RUNOOB');</span><br><span class="line">});</span><br><span class="line">```</span><br></pre></td></tr></tbody></table></figure><img src="/2022/09/02/Markdown%E8%AF%AD%E6%B3%95/09/02/Markdown%E8%AF%AD%E6%B3%95/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7094143.png" class="" title="image"><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>插入链接有两种方式：</p><ul><li>第一种：直接插入</li></ul><p><a href="https://mrhuanhao.cn/">https://mrhuanhao.cn/</a></p><p>这种方式适用于短的链接，但是过长的链接可能会看起来不得当</p><ul><li>第二种：使用markdown语法插入</li></ul><p>其实就是让一段文本，拥有跳转功能</p><p>语法如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></tbody></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[huanhao的主页](https://mrhuanhao.cn/)</span><br><span class="line"></span><br><span class="line">&lt;https://mrhuanhao.cn/&gt;</span><br></pre></td></tr></tbody></table></figure><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>在一个文章里面插入图片是必不可少的，本地的文章可以使用本地图片，在你上传博客之后，也必须上传本地图片，但这样会有弊端。</p><p>使用本地图片会严重拖慢博客速度，我们需要使用超链接进行插入图片，也就是把图片上传的某个服务器上面，然后获取图片在服务器上面的地址。</p><p>但是我们也可以使用免费的托管或者图床，上传我们的图片，本篇教程不教图床的使用，下篇文章将会提到。</p><p>插入图片的语法：</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">![<span class="string">图片描述</span>](<span class="link">图片的链接</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>在markdown里面是可以插入表格的，可以体现一些数据</p><p>语法：</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></tbody></table></figure><h2 id="让表格自动对其方式"><a href="#让表格自动对其方式" class="headerlink" title="让表格自动对其方式"></a>让表格自动对其方式</h2><ul><li>居右<code>-:</code></li><li>居左<code>:-</code></li><li>居中<code>:-:</code></li></ul><p>语法如下：</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></tbody></table></figure><p>我们只需要在第二行插入分隔线</p><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><p>因为在markdown的语法里面，用了一些特定的符号作为语法，如果我们想输出符号，而不是被识别成语法，就需要使转义字符</p><p>只需要使用反斜杠，然后加上下面的某个符号即可</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line"><span class="bullet">*</span>   星号</span><br><span class="line"><span class="emphasis">_   下划线</span></span><br><span class="line"><span class="emphasis">{}  花括号</span></span><br><span class="line"><span class="emphasis">[]  方括号</span></span><br><span class="line"><span class="emphasis">()  小括号</span></span><br><span class="line"><span class="emphasis">#   井字号</span></span><br><span class="line"><span class="emphasis">+   加号</span></span><br><span class="line"><span class="emphasis">-   减号</span></span><br><span class="line"><span class="emphasis">.   英文句点</span></span><br><span class="line"><span class="emphasis">!   感叹号</span></span><br></pre></td></tr></tbody></table></figure><ul><li>不使用转义字符：</li></ul><img src="/2022/09/02/Markdown%E8%AF%AD%E6%B3%95/09/02/Markdown%E8%AF%AD%E6%B3%95/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7105119.png" class="" title="image"><ul><li>使用了转义字符</li></ul><img src="/2022/09/02/Markdown%E8%AF%AD%E6%B3%95/09/02/Markdown%E8%AF%AD%E6%B3%95/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7105159.png" class="" title="image"><h1 id="其他高级语法"><a href="#其他高级语法" class="headerlink" title="其他高级语法"></a>其他高级语法</h1><p>在大多的markdown编辑器中，可能无法展示高级语法，以上的语法完全够用，你也可以无需学习高级语法。</p><p>高级语法有如下内容(只展示部分）：</p><ul><li><p>数学公式</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\mathbf{V}<span class="emphasis">_1 \times \mathbf{V}_</span>2 =  \begin{vmatrix} </span><br><span class="line">\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\</span><br><span class="line">\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\</span><br><span class="line">\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\</span><br><span class="line">\end{vmatrix}</span><br><span class="line">${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}</span><br><span class="line">$$</span><br></pre></td></tr></tbody></table></figure></li><li><p>HTML元素</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Alt<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>+<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Del<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>流程图</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">``flow</span><br><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异步调用的几种方式</title>
      <link href="/2022/09/02/Java%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/09/02/Java%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、通过创建新线程"><a href="#一、通过创建新线程" class="headerlink" title="一、通过创建新线程"></a>一、通过创建新线程</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception{</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"主线程 =====&gt; 开始 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; {</span><br><span class="line">        System.out.println(<span class="string">"异步线程 =====&gt; 开始 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        }<span class="keyword">catch</span> (InterruptedException e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"异步线程 =====&gt; 结束 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line">    }).start();</span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"主线程 =====&gt; 结束 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">主线程 =====&gt; 开始 =====&gt; <span class="number">1627893837146</span></span><br><span class="line">异步线程 =====&gt; 开始 =====&gt; <span class="number">1627893837200</span></span><br><span class="line">主线程 =====&gt; 结束 =====&gt; <span class="number">1627893839205</span></span><br><span class="line">异步线程 =====&gt; 结束 =====&gt; <span class="number">1627893842212</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>我们通过线程休眠来达成主线程执行时间2秒左右，异步线程执行5秒左右的效果。通过打印出来的时间戳倒数第四位（秒位）我们可以看出，两个的线程执行总时间为5秒左右，符合异步执行的特征</p><h2 id="二、通过线程池"><a href="#二、通过线程池" class="headerlink" title="二、通过线程池"></a>二、通过线程池</h2><p>因为异步任务的实现本质的由新线程来执行任务，所以通过线程池的也可以实现异步执行。写法同我们利用线程池开启多线程一样。但由于我们的目的不是执行多线程，而是异步执行任务，所以一般需要另外一个线程就够了。</p><p>因此区别于执行多线程任务的我们常用的newFixedThreadPool，在执行异步任务时，我们用newSingleThreadExecutor 来创建一个单个线程的线程池</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception{</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"主线程 =====&gt; 开始 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">    executorService.submit(()-&gt;{</span><br><span class="line">        System.out.println(<span class="string">"异步线程 =====&gt; 开始 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        }<span class="keyword">catch</span> (InterruptedException e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"异步线程 =====&gt; 结束 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line">    });</span><br><span class="line">    executorService.shutdown(); <span class="comment">// 回收线程池</span></span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"主线程 =====&gt; 结束 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">主线程 =====&gt; 开始 =====&gt; <span class="number">1627895467578</span></span><br><span class="line">异步线程 =====&gt; 开始 =====&gt; <span class="number">1627895467635</span></span><br><span class="line">主线程 =====&gt; 结束 =====&gt; <span class="number">1627895469644</span></span><br><span class="line">异步线程 =====&gt; 结束 =====&gt; <span class="number">1627895472649</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="三、通过-Async注解"><a href="#三、通过-Async注解" class="headerlink" title="三、通过@Async注解"></a>三、通过@Async注解</h2><p>使用起来也非常简单，将要异步执行的代码封装成一个方法，然后用@Async注解该方法，然后在主方法中直接调用就行</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mainThread</span><span class="params">()</span> <span class="keyword">throws</span> Exception{</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"主线程 =====&gt; 开始 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line">    collectionBill.asyncThread();</span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    System.out.println(<span class="string">"主线程 =====&gt; 结束 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">4000</span>); <span class="comment">// 用于防止jvm停止，导致异步线程中断</span></span><br><span class="line">}</span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncThread</span><span class="params">()</span>{</span><br><span class="line">    System.out.println(<span class="string">"异步线程 =====&gt; 开始 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    }<span class="keyword">catch</span> (InterruptedException e){</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"异步线程 =====&gt; 结束 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">主线程 =====&gt; 开始 =====&gt; <span class="number">1627897539948</span></span><br><span class="line">异步线程 =====&gt; 开始 =====&gt; <span class="number">1627897539956</span></span><br><span class="line">主线程 =====&gt; 结束 =====&gt; <span class="number">1627897541965</span></span><br><span class="line">异步线程 =====&gt; 结束 =====&gt; <span class="number">1627897544966</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>有以下两点需要注意：</p><p>1.类似@Tranctional注解，@Async注解的方法与调用方法不能在同一个类中，否则不生效<br>2.JUnit框架的设计不考虑多线程场景，所以主线程退出后，子线程也会跟着立即退出，所以可以在后面加多线程休眠时间来观察异步线程的执行情况</p><h2 id="四、通过CompletableFuture"><a href="#四、通过CompletableFuture" class="headerlink" title="四、通过CompletableFuture"></a>四、通过CompletableFuture</h2><p>CompletableFuture是JDK1.8的新特性，是对Future的扩展。CompletableFuture实现了CompletionStage接口和Future接口，增加了异步回调、流式处理、多个Future组合处理的能力</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception{</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"主线程 =====&gt; 开始 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line">    CompletableFuture.runAsync(() -&gt;{</span><br><span class="line">        System.out.println(<span class="string">"异步线程 =====&gt; 开始 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        }<span class="keyword">catch</span> (InterruptedException e){</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"异步线程 =====&gt; 结束 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line">    },executorService);</span><br><span class="line">    executorService.shutdown(); <span class="comment">// 回收线程池</span></span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"主线程 =====&gt; 结束 =====&gt; "</span> + System.currentTimeMillis());</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">主线程 =====&gt; 开始 =====&gt; <span class="number">1627898354914</span></span><br><span class="line">异步线程 =====&gt; 开始 =====&gt; <span class="number">1627898354977</span></span><br><span class="line">主线程 =====&gt; 结束 =====&gt; <span class="number">1627898356980</span></span><br><span class="line">异步线程 =====&gt; 结束 =====&gt; <span class="number">1627898359979</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片资源网站</title>
      <link href="/2022/08/30/%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E7%BD%91%E7%AB%99/"/>
      <url>/2022/08/30/%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>gif 动图网：<a href="https://www.soogif.com/">https://www.soogif.com/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java安装以及相关所用组件</title>
      <link href="/2022/08/30/java%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%89%80%E7%94%A8%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/08/30/java%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%89%80%E7%94%A8%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="java安装"><a href="#java安装" class="headerlink" title="java安装"></a>java安装</h1><h2 id="1-安装JDK"><a href="#1-安装JDK" class="headerlink" title="1.安装JDK"></a>1.安装JDK</h2><p> 点击进入<a href="https://www.oracle.com/java/technologies/downloads/#java8">jdk1.8官网</a></p><p>具体详细步骤参考：<a href="https://blog.csdn.net/m0_62407486/article/details/1205292852">https://blog.csdn.net/m0_62407486/article/details/1205292852</a></p><h2 id="2-编译器安装"><a href="#2-编译器安装" class="headerlink" title="2.编译器安装"></a>2.编译器安装</h2><p>安装idea 2021.2.x 版本 <a href="https://www.jetbrains.com/zh-cn/idea/download/other.html">https://www.jetbrains.com/zh-cn/idea/download/other.html</a></p><h4 id="安装专业版：IntelliJ-IDEA-Ultimate-windows（exe）"><a href="#安装专业版：IntelliJ-IDEA-Ultimate-windows（exe）" class="headerlink" title="安装专业版：IntelliJ IDEA Ultimate  windows（exe）"></a>安装专业版：IntelliJ IDEA Ultimate  windows（exe）</h4><h3 id="idea设置中文"><a href="#idea设置中文" class="headerlink" title="idea设置中文"></a>idea设置中文</h3><img src="/2022/08/30/java%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%89%80%E7%94%A8%E7%BB%84%E4%BB%B6/08/30/java%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%89%80%E7%94%A8%E7%BB%84%E4%BB%B6/image2022-8-22_13-30-34.png" class="" title="image2022-8-22_13-30-34"><img src="/2022/08/30/java%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%89%80%E7%94%A8%E7%BB%84%E4%BB%B6/08/30/java%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%89%80%E7%94%A8%E7%BB%84%E4%BB%B6/image2022-8-22_13-32-3.png" class="" title="image"><img src="/2022/08/30/java%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%89%80%E7%94%A8%E7%BB%84%E4%BB%B6/08/30/java%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%89%80%E7%94%A8%E7%BB%84%E4%BB%B6/image2022-8-22_13-31-9.png" class="" title="image2022-8-22_13-31-9"><p>破解文档： <a href="https://mp.weixin.qq.com/s/r3RjnzPwjEHmWqdXtMkAWw">https://mp.weixin.qq.com/s/r3RjnzPwjEHmWqdXtMkAWw</a></p><p>文章中破解包： <a href="Crack.rar">Crack.rar</a> </p><p>idea有30天的试用期，如果急需使用的话，可以暂时不破解</p><h2 id="3-Maven库安装"><a href="#3-Maven库安装" class="headerlink" title="3.Maven库安装"></a>3.Maven库安装</h2><p> 点击进入<a href="http://maven.apache.org/">apache-maven官网</a> </p><p>本地Maven配置：<a href="https://blog.csdn.net/m0_62464260/article/details/122707884"> https://blog.csdn.net/m0_62464260/article/details/122707884</a></p><p><a href="java%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%89%80%E7%94%A8%E7%BB%84%E4%BB%B6/settings.xml">settings.xml</a> </p><p>公司所用的Maven Setting.xml 可以导入公司的私有jar包，根据这里面的settings 内容，进行相应的修改</p><h2 id="4-idea-gitLab"><a href="#4-idea-gitLab" class="headerlink" title="4 idea-gitLab"></a>4 idea-gitLab</h2><p>详情见博客地址： <a href="https://blog.csdn.net/yage124/article/details/107957175">https://blog.csdn.net/yage124/article/details/107957175</a></p><p>ps: 博客上面有可能和实际情况不一样，可能是idea的版本不一致导致的</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志框架logback使用方法</title>
      <link href="/2022/08/26/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6logback%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2022/08/26/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6logback%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="一、logback的介绍"><a href="#一、logback的介绍" class="headerlink" title="一、logback的介绍"></a>一、logback的介绍</h1><p>Logback是由log4j创始人设计的又一个开源日志组件。logback当前分成三个模块：logback-core，logback- classic和logback-access。logback-core是其它两个模块的基础模块。logback-classic是log4j的一个改良版本。此外logback-classic完整实现SLF4J API使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging。logback-access访问模块与Servlet容器集成提供通过Http来访问日志的功能。 Logback是要与SLF4J结合起来用两个组件的官方网站如下：</p><p>logback的官方网站： <a href="http://logback.qos.ch/download.html">http://logback.qos.ch</a></p><p>SLF4J的官方网站：<a href="http://www.slf4j.org/download.html">http://www.slf4j.org</a></p><p><strong>本文章用到的组件如下：</strong></p><p>logback-access-1.0.0.jar（这个可以不用）</p><p>logback-classic-1.0.0.jar</p><p>logback-core-1.0.0.jar</p><p>slf4j-api-1.6.0.jar</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- logback+slf4j --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></tbody></table></figure><h1 id="二、Logback的配置介绍"><a href="#二、Logback的配置介绍" class="headerlink" title="二、Logback的配置介绍"></a>二、Logback的配置介绍</h1><p><strong>1、Logger、appender及layout</strong></p><p>Logger作为日志的记录器，把它关联到应用的对应的context上后，主要用于存放日志对象，也可以定义日志类型、级别。</p><p>Appender主要用于指定日志输出的目的地，目的地可以是控制台、文件、远程套接字服务器、 MySQL、PostreSQL、 Oracle和其他数据库、 JMS和远程UNIX Syslog守护进程等。 </p><p>Layout负责把事件转换成字符串，格式化的日志信息的输出。</p><p><strong>2、logger context</strong></p><p>各个logger都被关联到一个LoggerContext，LoggerContext负责制造logger，也负责以树结构排列各 logger。其他所有logger也通过org.slf4j.LoggerFactory 类的静态方法getLogger取得。 getLogger方法以logger名称为参数。用同一名字调用LoggerFactory.getLogger 方法所得到的永远都是同一个logger对象的引用。</p><p><strong>3、有效级别及级别的继承</strong></p><p>Logger 可以被分配级别。级别包括：TRACE、DEBUG、INFO、WARN 和 ERROR，定义于ch.qos.logback.classic.Level类。如果 logger没有被分配级别，那么它将从有被分配级别的最近的祖先那里继承级别。root logger默认级别是DEBUG。</p><p><strong>4、打印方法与基本的选择规则</strong></p><p>打印方法决定记录请求的级别。例如，如果L是一个logger实例，那么，语句L.info(“..”)是一条级别为 INFO 的记录语句。记录请求的级别在高于或等于其logger的有效级别时被称为被启用，否则，称为被禁用。记录请求级别为 p，其logger的有效级别为q，只有则当p&gt;=q时，该请求才会被执行。</p><p><em><strong>*该规则是*<em>l</em></strong></em>ogback的核心。级别排序为： TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR。** </p><h1 id="三、Logback的默认配置"><a href="#三、Logback的默认配置" class="headerlink" title="三、Logback的默认配置"></a>三、Logback的默认配置</h1><p>如果配置文件logback-test.xml和logback.xml都不存在，那么logback默认地会调用BasicConfigurator ，创建一个最小化配置。最小化配置由一个关联到根logger的ConsoleAppender组成。输出用模式为%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n的PatternLayoutEncoder进行格式化。root logger默认级别是DEBUG。</p><p><strong>1、Logback的配置文件</strong></p><p>Logback配置文件的语法非常灵活。正因为灵活，所以无法用DTD或XML schema进行定义。尽管如此，可以这样描述配置文件的基本结构：以<configuration>开头，后面有零个或多个<appender>元素，有零个或多个<logger>元素，有最多一个<root>元素。</root></logger></appender></configuration></p><p><strong>2、Logback默认配置的步骤</strong></p><p>(1). 尝试在classpath下查找文件logback-test.xml；</p><p>(2). 如果文件不存在，则查找文件logback.xml；</p><p>(3). 如果两个文件都不存在，logback用Bas icConfigurator自动对自己进行配置，这会导致记录输出到控制台。</p><p><strong>3、Logback.xml文件</strong>    </p><p>HTML</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"c:/log"</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 日志输出编码 --&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">Encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">Encoding</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span>   </span><br><span class="line">             <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n   </span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>   </span><br><span class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 --&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span>  <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">Encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">Encoding</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>${LOG_HOME}/myApp.log.%d{yyyy-MM-dd}.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span>   </span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n   </span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </span><br><span class="line">       <span class="tag">&lt;/<span class="name">layout</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span> </span><br><span class="line">   <span class="comment">&lt;!-- show parameters for hibernate sql 专为 Hibernate 定制 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicBinder"</span>  <span class="attr">level</span>=<span class="string">"TRACE"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicExtractor"</span>  <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.SQL"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.engine.QueryParameters"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.engine.query.HQLQueryPlan"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span> </span><br><span class="line">     </span><br><span class="line">     <span class="comment">&lt;!--日志异步到数据库 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"DB"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.db.DBAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志异步到数据库 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">connectionSource</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.db.DriverManagerConnectionSource"</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--连接池 --&gt;</span> </span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">driverClass</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driverClass</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">url</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/databaseName<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">user</span>&gt;</span>root<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">password</span>&gt;</span>root<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">connectionSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span> --&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="四、在程序用引用Logback"><a href="#四、在程序用引用Logback" class="headerlink" title="四、在程序用引用Logback"></a>四、在程序用引用Logback</h1><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlogAction</span>{</span><br><span class="line">     <span class="comment">//定义一个全局的记录器，通过LoggerFactory获取</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(BlogAction.class); </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        logger.info(<span class="string">"logback 成功了"</span>);</span><br><span class="line">        logger.error(<span class="string">"logback 成功了"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> logback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中Synchronized的使用</title>
      <link href="/2022/08/25/Java%E4%B8%ADSynchronized%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/08/25/Java%E4%B8%ADSynchronized%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在编程中，经常需要用到同步，这里讲一下synchronized关键字的相关知识</p><h1 id="1-使用方式"><a href="#1-使用方式" class="headerlink" title="1.使用方式"></a>1.使用方式</h1><ul><li>修饰一个<strong>代码块</strong>，被修饰的代码块称为同步代码块，作用范围是大括号{}括起来的代码；</li><li>修饰一个<strong>方法</strong>，被修饰的方法称为同步方法，其作用范围是整个方法；</li><li>修改一个<strong>静态方法</strong>，作用范围是整个静态方法；</li><li>修改一个<strong>类</strong>，作用范围是synchronized后面括号括起来的部分。</li></ul><h1 id="2-使用示例"><a href="#2-使用示例" class="headerlink" title="2.使用示例"></a>2.使用示例</h1><p><strong>修饰代码块</strong><br>注：this 表示锁是当前对象，锁可以自定义，但是要实现同步必须是同一把锁才可以。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">   <span class="keyword">synchronized</span>(<span class="built_in">this</span>) {</span><br><span class="line">     <span class="comment">// todo some thing </span></span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>修饰方法</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">   <span class="comment">// todo some thing</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修饰方法的注意事项</p><ul><li>接口方法时不能使用synchronized关键字;</li><li>构造方法不能使用synchronized关键字，但可以使用synchronized代码块进行同步;</li><li>synchronized关键字无法继承;<br>如果在父类中的某个方法使用了synchronized关键字，而在子类中覆盖了这个方法，在子类中的这个方法默认情况下并不是同步的。<br>子类方法同步的解决方案<br>1）子类方法也加上synchronized 关键字<br>2）子类方法中调用父类同步的方法，例如：使用 super.xxxMethod()调用父类方法</li></ul><p><strong>修饰静态方法</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> {</span><br><span class="line">   <span class="comment">// todo some thing</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修饰类</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DemoClass</span> {</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> {</span><br><span class="line">      <span class="keyword">synchronized</span>(DemoClass.class) {</span><br><span class="line">         <span class="comment">// todo some thing</span></span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="3-实战实例"><a href="#3-实战实例" class="headerlink" title="3.实战实例"></a>3.实战实例</h1><h2 id="3-1-修饰代码块"><a href="#3-1-修饰代码块" class="headerlink" title="3.1 修饰代码块"></a>3.1 修饰代码块</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * synchrosnized 关键字测试</span></span><br><span class="line"><span class="comment"> * 同步代码块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 码农猿</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedDemo1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局变量</span></span><br><span class="line"><span class="comment">     * 创建一个计数器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Date</span> <span class="variable">startDate</span> <span class="operator">=</span> DateUtil.date();</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    System.out.println(<span class="string">"线程 ："</span> + Thread.currentThread().getName() + <span class="string">" 当前计数器 ："</span> + (counter++));</span><br><span class="line">                    System.out.println(<span class="string">"开始时间 ："</span> + startDate + <span class="string">" 当前时间 ："</span> + DateUtil.date());</span><br><span class="line">                    System.out.println();</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">SynchronizedDemo1</span> <span class="variable">syncThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedDemo1</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread, <span class="string">"sync-thread-1"</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread, <span class="string">"sync-thread-2"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>结果图示</strong><br><img src="http://image109.360doc.com/DownloadImg/2021/06/2911/225239904_1_20210629110511192" alt="img"><br><strong>结果说明</strong><br>当两个并发线程(thread1和thread2)访问同一个对象(syncThread)中的synchronized代码时<br>在同一时刻只能有一个线程得到执行，<br>另一个线程受阻塞，必须等待当前线程执行完这个代码块以后才能执行该代码块。Thread1和thread2是互斥的，因为在执行synchronized代码块时会锁定当前的对象，只有执行完该代码块才能释放该对象锁，下一个线程才能执行并锁定该对象。</p><p><strong>稍加改动</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">SynchronizedDemo1</span> <span class="variable">syncThread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedDemo1</span>();</span><br><span class="line">        <span class="type">SynchronizedDemo1</span> <span class="variable">syncThread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedDemo1</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread1, <span class="string">"sync-thread-1"</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread2, <span class="string">"sync-thread-2"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p><img src="http://image109.360doc.com/DownloadImg/2021/06/2911/225239904_2_20210629110513598" alt="img"> 从图上可以看出来，两个线程都是新建一个对象去执行的，所以锁也是两个，所以执行方式是同时执行了。</p><h2 id="3-2修饰普通方法"><a href="#3-2修饰普通方法" class="headerlink" title="3.2修饰普通方法"></a>3.2修饰普通方法</h2><p>Synchronized修饰一个方法很简单，就是在方法的前面加synchronized关键字，<br>修饰方法和修饰一个代码块类似，只是作用范围不一样，修饰代码块是大括号括起来的范围，而修饰方法范围是整个函数。</p><p>将第一个个实例中的run方法改成如下的方式，实现的效果一样。</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">Date</span> <span class="variable">startDate</span> <span class="operator">=</span> DateUtil.date();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            System.out.println(<span class="string">"线程 ："</span> + Thread.currentThread().getName() + <span class="string">" 当前计数器 ："</span> + (counter++));</span><br><span class="line">            System.out.println(<span class="string">"开始时间 ："</span> + startDate + <span class="string">" 当前时间 ："</span> + DateUtil.date());</span><br><span class="line">            System.out.println();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-2修饰静态方法"><a href="#3-2修饰静态方法" class="headerlink" title="3.2修饰静态方法"></a>3.2修饰静态方法</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.lock.syn.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * synchrosnized 关键字测试</span></span><br><span class="line"><span class="comment"> * 同步-静态方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 码农猿</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedDemo3</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态的同步方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Date</span> <span class="variable">startDate</span> <span class="operator">=</span> DateUtil.date();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                System.out.println(<span class="string">"线程 ："</span> + Thread.currentThread().getName() + <span class="string">" 当前计数器 ："</span> + (counter++));</span><br><span class="line">                System.out.println(<span class="string">"开始时间 ："</span> + startDate + <span class="string">" 当前时间 ："</span> + DateUtil.date());</span><br><span class="line">                System.out.println();</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        method();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试代码</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    <span class="type">SynchronizedDemo3</span> <span class="variable">syncThread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedDemo3</span>();</span><br><span class="line">    <span class="type">SynchronizedDemo3</span> <span class="variable">syncThread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedDemo3</span>();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread1, <span class="string">"sync-thread-1"</span>);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(syncThread1, <span class="string">"sync-thread-2"</span>);</span><br><span class="line">    thread1.start();</span><br><span class="line">    thread2.start();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>结果图示</strong><br><img src="http://image109.360doc.com/DownloadImg/2021/06/2911/225239904_3_20210629110513942" alt="img"><br><strong>结果说明</strong><br>syncThread1和syncThread2是SyncThread的两个对象，但在thread1和thread2并发执行时却保持了线程同步。这是因为run中调用了静态方法method，而静态方法是属于同一类的，所以syncThread1和syncThread2相当于用了同一把锁。</p><p>注： 实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程池</title>
      <link href="/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-线程池概念"><a href="#1-线程池概念" class="headerlink" title="1. 线程池概念"></a>1. <a href="https://so.csdn.net/so/search?q=%E7%BA%BF%E7%A8%8B%E6%B1%A0&amp;spm=1001.2101.3001.7020">线程池</a>概念</h2><p>创建Java线程需要给线程分配<a href="https://so.csdn.net/so/search?q=%E5%A0%86%E6%A0%88&amp;spm=1001.2101.3001.7020">堆栈</a>内存以及初始化内存，还需要进行系统调用，频繁地创建和销毁线程会大大降低系统的运行效率，采用线程池来管理线程有以下好处：</p><ol><li>提升性能：线程池能独立负责线程的创建、维护和分配</li><li>线程管理：每个Java线程池会保持一些基本的线程统计信息，对线程进行有效管理</li></ol><hr><h2 id="2-JUC线程池架构"><a href="#2-JUC线程池架构" class="headerlink" title="2. JUC线程池架构"></a>2. JUC线程池<a href="https://so.csdn.net/so/search?q=%E6%9E%B6%E6%9E%84&amp;spm=1001.2101.3001.7020">架构</a></h2><img src="/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVBhbmRhQEdQRg==,size_20,color_FFFFFF,t_70,g_se,x_16.png" class="" title="在这里插入图片描述"><p><strong>1. Executor</strong><br>Executor提供了execute()接口来执行已提交的Runnable执行目标实例,它只有1个方法：<br><code>void execute(Runnable command)</code></p><p><strong>2. ExecutorService</strong><br>继承于Executor,Java异步目标任务的“执行者服务接”口，对外提供异步任务的接收服务</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"> * <span class="meta">@param</span> task the task to submit</span><br><span class="line">     * <span class="meta">@param</span> &lt;T&gt; the type of the task<span class="string">'s result</span></span><br><span class="line"><span class="string">     * @return a Future representing pending completion of the task</span></span><br><span class="line"><span class="string">     * @throws RejectedExecutionException if the task cannot be</span></span><br><span class="line"><span class="string">     *         scheduled for execution</span></span><br><span class="line"><span class="string">     * @throws NullPointerException if the task is null</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);//向线程池提交单个异步任务</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//想线程池提交批量异步任务</span></span><br><span class="line"><span class="string"> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span><br><span class="line"><span class="string">                                  long timeout, TimeUnit unit)</span></span><br><span class="line"><span class="string">        throws InterruptedException;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></tbody></table></figure><p><strong>3. AbstractExecutorService</strong><br>抽象类，实现了ExecutorService</p><p><strong>4. ThreadPoolExecutor</strong><br>线程池实现类，继承于AbstractExecutorService，JUC线程池的<strong>核心实现类</strong></p><p><strong>5. ScheduledExecutorService</strong><br>继承于ExecutorService。它是一个可以完成“延时”和“周期性”任务的调度线程池接口</p><p><strong>6. ScheduledThreadPoolExecutor</strong><br>继承于ThreadPoolExecutor，实现了ExecutorService中延时执行和周期执行等抽象方法</p><p><strong>7. Executors</strong><br>静态工厂类，它通过静态工厂方法返回****ExecutorService*<em><strong>、</strong>ScheduledExecutorService</em>*等线程池示例对象</p><hr><h2 id="3-Executors创建线程的4种方法"><a href="#3-Executors创建线程的4种方法" class="headerlink" title="3. Executors创建线程的4种方法"></a>3. Executors创建线程的4种方法</h2><p><strong>1. newSingleThreadExecutor创建“单线程化线程池”</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> threadpool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateThreadPollDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> SLEEP_GAP=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TargetTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>{</span><br><span class="line">        <span class="keyword">static</span> AtomicInteger taskNo=<span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> String taskName;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TargetTask</span><span class="params">()</span></span><br><span class="line">        {</span><br><span class="line">            taskName=<span class="string">"task-"</span>+taskNo;</span><br><span class="line">            taskNo.incrementAndGet();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">        {</span><br><span class="line">            System.out.println(<span class="string">"task:"</span>+taskName+<span class="string">" is doing..."</span>);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(SLEEP_GAP);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">"task:"</span>+taskName+<span class="string">" end..."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        ExecutorService pool=Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">        {</span><br><span class="line">            pool.execute(<span class="keyword">new</span> <span class="title class_">TargetTask</span>());</span><br><span class="line">            pool.submit(<span class="keyword">new</span> <span class="title class_">TargetTask</span>());</span><br><span class="line">        }</span><br><span class="line">        pool.shutdown();</span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><img src="/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVBhbmRhQEdQRg==,size_17,color_FFFFFF,t_70,g_se,x_16.png" class="" title="在这里插入图片描述"><p>特点：</p><ul><li>单线程化的线程池中的任务是按照提交的次序顺序执行的</li><li>只有一个线程的线程池</li><li>池中的唯一线程的存活时间是无限的</li><li>当池中的唯一线程正繁忙时，新提交的任务实例会进入内部的阻塞队列中，并且其阻塞队列是无界的</li><li>适用场景：任务按照提交次序，一个任务一个任务地逐个执行的场景</li></ul><p><strong>2. newFixedThreadPool创建“固定数量的线程池</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> threadpool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateThreadPollDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> SLEEP_GAP=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TargetTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>{</span><br><span class="line">        <span class="keyword">static</span> AtomicInteger taskNo=<span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> String taskName;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TargetTask</span><span class="params">()</span></span><br><span class="line">        {</span><br><span class="line">            taskName=<span class="string">"task-"</span>+taskNo;</span><br><span class="line">            taskNo.incrementAndGet();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">        {</span><br><span class="line">            System.out.println(taskName+<span class="string">" is doing..."</span>);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(SLEEP_GAP);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(taskName+<span class="string">" end..."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        ExecutorService pool=Executors.newFixedThreadPool(<span class="number">3</span>);<span class="comment">//创建含有3个线程的线程池</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">        {</span><br><span class="line">            pool.execute(<span class="keyword">new</span> <span class="title class_">TargetTask</span>());</span><br><span class="line">            pool.submit(<span class="keyword">new</span> <span class="title class_">TargetTask</span>());</span><br><span class="line">        }</span><br><span class="line">        pool.shutdown();</span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><img src="/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVBhbmRhQEdQRg==,size_19,color_FFFFFF,t_70,g_se,x_16.png" class="" title="在这里插入图片描述"><p>特点：</p><ul><li>如果线程数没有达到“固定数量”，每次提交一个任务线程池内就创建一个新线程，直到线程达到线程池固定的数量</li><li>线程池的大小一旦达到“固定数量”就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程</li><li>在接收异步任务的执行目标实例时，如果池中的所有线程均在繁忙状态，新任务会进入阻塞队列中（无界的阻塞队列）</li></ul><p>适用场景：</p><ul><li>需要任务长期执行的场景</li><li>CPU密集型任务</li></ul><p>缺点：</p><ul><li>内部使用无界队列来存放排队任务，当大量任务超过线程池最大容量需要处理时，队列无限增大，使服务器资源迅速耗尽</li></ul><p><strong>3. newCachedThreadPool创建“可缓存线程池”</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> threadpool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateThreadPollDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> SLEEP_GAP=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TargetTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>{</span><br><span class="line">        <span class="keyword">static</span> AtomicInteger taskNo=<span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> String taskName;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TargetTask</span><span class="params">()</span></span><br><span class="line">        {</span><br><span class="line">            taskName=<span class="string">"task-"</span>+taskNo;</span><br><span class="line">            taskNo.incrementAndGet();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">        {</span><br><span class="line">            System.out.println(taskName+<span class="string">" is doing..."</span>);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(SLEEP_GAP);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(taskName+<span class="string">" end..."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        ExecutorService pool=Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">        {</span><br><span class="line">            pool.execute(<span class="keyword">new</span> <span class="title class_">TargetTask</span>());</span><br><span class="line">            pool.submit(<span class="keyword">new</span> <span class="title class_">TargetTask</span>());</span><br><span class="line">        }</span><br><span class="line">        pool.shutdown();</span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><img src="/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVBhbmRhQEdQRg==,size_18,color_FFFFFF,t_70,g_se,x_16.png" class="" title="在这里插入图片描述"><p>特点：</p><ul><li>在接收新的异步任务target执行目标实例时，如果池内所有线程繁忙，此线程池就会添加新线程来处理任务</li><li>线程池不会对线程池大小进行限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小</li><li>如果部分线程空闲，也就是存量线程的数量超过了处理任务数量，就会回收空闲（60秒不执行任务）线程</li></ul><p>适用场景：</p><ul><li>需要快速处理突发性强、耗时较短的任务场景，如Netty的NIO处理场景、REST API接口的瞬时削峰场景</li></ul><p>缺点：</p><ul><li>线程池没有最大线程数量限制，如果大量的异步任务执行目标实例同时提交，可能会因创建线程过多而导致资源耗尽</li></ul><p><strong>4. newScheduledThreadPool创建“可调度线程池”</strong></p><ul><li>延时性</li><li>周期性</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> threadpool;</span><br><span class="line"><span class="keyword">import</span> java.security.Policy;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateThreadPollDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> SLEEP_GAP=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TargetTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>{</span><br><span class="line">        <span class="keyword">static</span> AtomicInteger taskNo=<span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> String taskName;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TargetTask</span><span class="params">()</span></span><br><span class="line">        {</span><br><span class="line">            taskName=<span class="string">"task-"</span>+taskNo;</span><br><span class="line">            taskNo.incrementAndGet();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">        {</span><br><span class="line">            System.out.println(taskName+<span class="string">" is doing..."</span>);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(SLEEP_GAP);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(taskName+<span class="string">" end..."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">       ScheduledExecutorService pool=Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">       {</span><br><span class="line">           pool.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">TargetTask</span>(), <span class="number">0</span>, <span class="number">500</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">           <span class="comment">//参数1： task任务  </span></span><br><span class="line">           <span class="comment">//参数2： 首次执行任务的延迟时间</span></span><br><span class="line">           <span class="comment">//参数3： 周期性执行的时间</span></span><br><span class="line">           <span class="comment">//参数4： 时间单位</span></span><br><span class="line"></span><br><span class="line">       }</span><br><span class="line">       Thread.sleep(<span class="number">3000</span>);<span class="comment">//主线程睡眠时间越长 周期次数越多</span></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><img src="/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVBhbmRhQEdQRg==,size_17,color_FFFFFF,t_70,g_se,x_16-16612221312071.png" class="" title="在这里插入图片描述"><p>总结：Executors创建线程池的4种方法十分方便，但是构造器创建普通线程池、可调度线程池比较复杂，这些构造器会涉及大量的复杂参数，已经较少使用。</p><p><strong>Executors创建线程池存在的问题：</strong></p><ol><li>创建固定数量线程池的问题</li></ol><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> {</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>阻塞队列无界，队列很大，很有可能导致JVM出现OOM（Out Of Memory）异常，即<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&amp;spm=1001.2101.3001.7020">内存</a>资源耗尽</p></blockquote><ol><li>创建单线程线程池的问题</li></ol><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> {</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">           (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                   <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                   <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>问题和固定数量线程池一样，阻塞队列无界</p></blockquote><ol><li>创建缓存线程池的问题</li></ol><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> {</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                     <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                     <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>问题存在于其最大线程数量不设限上。由于其maximumPoolSize的值为Integer.MAX_VALUE（非常大），可以认为可以无限创建线程，如果任务提交较多，就会造成大量的线程被启动，很有可能造成OOM异常，甚至导致CPU线程资源耗尽</p></blockquote><ol><li>创建可调度线程存在的问题</li></ol><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title function_">newScheduledThreadPool</span><span class="params">(<span class="type">int</span> corePoolSize)</span> {</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ScheduledThreadPoolExecutor</span>(corePoolSize);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ScheduledThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize)</span> {</span><br><span class="line">       <span class="built_in">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">DelayedWorkQueue</span>());</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>主要问题在于线程数不设上限</p></blockquote><p><strong>总结：</strong></p><ul><li>newFixedThreadPool和newSingleThreadExecutor： 阻塞队列无界，会堆积大量任务导致OOM(内存耗尽)</li><li>newCachedThreadPool和newScheduledThreadPool： 线程数量无上界，会导致创建大量的线程，从而导致OOM</li><li>建议直接使用线程池ThreadPoolExecutor的构造器</li></ul><hr><h2 id="4-线程池的标准创建方式"><a href="#4-线程池的标准创建方式" class="headerlink" title="4. 线程池的标准创建方式"></a>4. 线程池的标准创建方式</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title class_">AbstractExecutorService</span> {</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Core pool size is the minimum number of workers to keep alive</span></span><br><span class="line"><span class="comment">     * (and not allow to time out etc) unless allowCoreThreadTimeOut</span></span><br><span class="line"><span class="comment">     * is set, in which case the minimum is zero.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> corePoolSize;<span class="comment">//核心线程数，即使线程空闲也不会被收回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Maximum pool size. Note that the actual maximum is internally</span></span><br><span class="line"><span class="comment">     * bounded by CAPACITY.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> maximumPoolSize;<span class="comment">//线程的上限</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Timeout in nanoseconds for idle threads waiting for work.</span></span><br><span class="line"><span class="comment">     * Threads use this timeout when there are more than corePoolSize</span></span><br><span class="line"><span class="comment">     * present or if allowCoreThreadTimeOut. Otherwise they wait</span></span><br><span class="line"><span class="comment">     * forever for new work.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">long</span> keepAliveTime;<span class="comment">//线程的最大空闲时长</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The queue used for holding tasks and handing off to worker</span></span><br><span class="line"><span class="comment">     * threads.  We do not require that workQueue.poll() returning</span></span><br><span class="line"><span class="comment">     * null necessarily means that workQueue.isEmpty(), so rely</span></span><br><span class="line"><span class="comment">     * solely on isEmpty to see if the queue is empty (which we must</span></span><br><span class="line"><span class="comment">     * do for example when deciding whether to transition from</span></span><br><span class="line"><span class="comment">     * SHUTDOWN to TIDYING).  This accommodates special-purpose</span></span><br><span class="line"><span class="comment">     * queues such as DelayQueues for which poll() is allowed to</span></span><br><span class="line"><span class="comment">     * return null even if it may later return non-null when delays</span></span><br><span class="line"><span class="comment">     * expire.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;<span class="comment">//任务的排队队列</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> ThreadFactory threadFactory;<span class="comment">//新线程的产生方式</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handler called when saturated or shutdown in execute.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> RejectedExecutionHandler handler;<span class="comment">//拒绝策略</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>1. 核心线程和最大线程数量</strong></p><ul><li>corePoolSize用于设置核心（Core）线程池数量，参数maximumPoolSize用于设置最大线程数量</li><li>线程池接收到新任务，当前工作线程数少于corePoolSize, 即使有空闲的工作线程，也会创建新的线程来处理该请求，直到线程数达到corePoolSize</li><li>当前工作线程数多于corePoolSize数量，但小于maximumPoolSize数量，那么仅当任务排队队列已满时才会创建新线程</li><li>maximumPoolSize被设置为无界值（如Integer.MAX_VALUE）时，线程池可以接收任意数量的并发任务</li></ul><p><strong>2. BlockingQueue</strong></p><ul><li>BlockingQueue（阻塞队列）的实例用于暂时接收到的异步任务，如果线程池的核心线程都在忙，那么所接收到的目标任务缓存在阻塞队列中</li></ul><p><strong>3. keepAliveTime</strong></p><ul><li>空闲线程存活时间</li><li>用于设置池内线程最大Idle（空闲）时长（或者说保活时长）</li><li>超过这个时间，默认情况下Idle、非Core线程会被回收</li></ul><p>注意：若调用了allowCoreThreadTimeOut(boolean)方法，并且传入了参数true，则keepAliveTime参数所设置的Idle超时策略也将被应用于核心线程</p><hr><h2 id="5-向线程池提交任务的两种方式"><a href="#5-向线程池提交任务的两种方式" class="headerlink" title="5. 向线程池提交任务的两种方式"></a>5. 向线程池提交任务的两种方式</h2><ol><li>execute方法<br><code>void execute(Runnable command)</code>: Executor接口中的方法</li><li>submit方法<br><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</code><br><code>&lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);</code><br><code>Future&lt;?&gt; submit(Runnable task);</code><br>这3个submit方法都是ExecutorService接口中的方法</li></ol><p>两种方法的区别：</p><ul><li>execute()方法只能接收Runnable类型的参数，而submit()方法可以接收Callable、Runnable两种类型的参数</li><li>Callable类型的任务是可以返回执行结果的，而Runnable类型的任务不可以返回执行结果</li><li>submit()提交任务后会有返回值，而execute()没有</li><li>submit()方便Exception处理</li></ul><p><strong>1. 通过submit()返回的Future对象获取结果</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> threadpool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateThreadPollDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">       ScheduledExecutorService pool=Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line">       Future&lt;Integer&gt; future=pool.submit(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">        }</span><br><span class="line">           </span><br><span class="line">       });</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">        Integer result=future.get();</span><br><span class="line">        System.out.println(<span class="string">"result:"</span>+result);<span class="comment">//123</span></span><br><span class="line">    } <span class="keyword">catch</span> (ExecutionException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    pool.shutdown();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>2. 通过submit()返回的Future对象捕获异常</strong></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> threadpool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.RuntimeErrorException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateThreadPollDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> SLEEP_GAP=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TargetTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>{</span><br><span class="line">        <span class="keyword">static</span> AtomicInteger taskNo=<span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">        String taskName;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TargetTask</span><span class="params">()</span></span><br><span class="line">        {</span><br><span class="line">            taskName=<span class="string">"task-"</span>+taskNo;</span><br><span class="line">            taskNo.incrementAndGet();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">        {</span><br><span class="line">            System.out.println(taskName+<span class="string">" is doing..."</span>);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(SLEEP_GAP);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(taskName+<span class="string">" end..."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TargetTaskWithError</span> <span class="keyword">extends</span> <span class="title class_">TargetTask</span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">super</span>.run();<span class="comment">//执行父类的run方法</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">"Error from "</span>+taskName);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">       ScheduledExecutorService pool=Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line">      pool.execute(<span class="keyword">new</span> <span class="title class_">TargetTaskWithError</span>());</span><br><span class="line">      Future future=pool.submit(<span class="keyword">new</span> <span class="title class_">TargetTaskWithError</span>());</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">if</span>(future.get()==<span class="literal">null</span>)</span><br><span class="line">          {</span><br><span class="line">              System.out.println(<span class="string">"No Exception"</span>);</span><br><span class="line">          }</span><br><span class="line">    } <span class="keyword">catch</span> (ExecutionException e) {</span><br><span class="line">      </span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    pool.shutdown();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><img src="/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVBhbmRhQEdQRg==,size_20,color_FFFFFF,t_70,g_se,x_16-16612221312072.png" class="" title="在这里插入图片描述"><blockquote><p>execute()方法在启动任务执行后，任务执行过程中可能发生的异常调用者并不关心。而通过submit()方法返回的Future对象（异步执行实例），可以进行异步执行过程中的异常捕获</p></blockquote><hr><h2 id="6-线程池的任务调度流程"><a href="#6-线程池的任务调度流程" class="headerlink" title="6. 线程池的任务调度流程"></a>6. 线程池的任务调度流程</h2><img src="/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVBhbmRhQEdQRg==,size_20,color_FFFFFF,t_70,g_se,x_16-16612221312073.png" class="" title="在这里插入图片描述"><ol><li>如果<strong>当前工作线程数量小于核心线程数量</strong>，执行器总是优先创建一个任务线程，而不是从线程队列中获取一个空闲线程</li><li>如果<strong>线程池中总的任务数量大于核心线程池数量</strong>，新接收的任务将被加入<strong>阻塞队列</strong>中，一直到阻塞队列已满。</li><li>当完成一个任务的执行时，执行器总是<strong>优先从阻塞队列</strong>中获取下一个任务，并开始执行，一直到阻塞队列为空</li><li>在<strong>核心线程池数量已经用完</strong>、<strong>阻塞队列也已经满</strong>了的场景下，如果线程池接收到新的任务，将会为新任务创建一个线程（<strong>非核心线程</strong>），并且立即开始执行新任务</li><li>在<strong>核心线程都用完</strong>、<strong>阻塞队列已满</strong>的情况下，一直会创建新线程去执行新任务，直到池内的线程总数<strong>超出maximumPoolSize</strong>。如果线程池的线程总数超过maximumPoolSize，线程池就会拒绝接收任务，当新任务过来时，会为新任务执行拒绝策略</li></ol><p>注意点：</p><ul><li>核心和最大线程数量、BlockingQueue队列等参数如果配置得不合理，可能会造成异步任务得不到预期的并发执行，造成严重的排队等待现象</li><li>线程池的调度器创建线程的一条重要的规则是：在corePoolSize已满之后，还需要等阻塞队列已满，才会去创建新的线程</li></ul><p>example: 设置核心线程数量为1，阻塞队列为100，有5个任务待执行（假设极端情况下任务一直执行不接受），则只有1个任务可以被执行，其他4个任务在阻塞队列中，而不是创建新线程进行处理（阻塞队列未满）</p><hr><h2 id="7-ThreadFactory（线程工厂）"><a href="#7-ThreadFactory（线程工厂）" class="headerlink" title="7. ThreadFactory（线程工厂）"></a>7. ThreadFactory（线程工厂）</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ThreadFactory</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new {<span class="doctag">@code</span> Thread}.  Implementations may also initialize</span></span><br><span class="line"><span class="comment">     * priority, name, daemon status, {<span class="doctag">@code</span> ThreadGroup}, etc.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r a runnable to be executed by new thread instance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> constructed thread, or {<span class="doctag">@code</span> null} if the request to</span></span><br><span class="line"><span class="comment">     *         create a thread is rejected</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>ThreadFactory是Java线程工厂接口，只有1个方法，调用ThreadFactory的唯一方法newThread()创建新线程时，可以更改所创建的新线程的名称、线程组、优先级、守护进程状态等</li><li>使用Executors创建新的线程池时，可以指定工厂，未指定是默认使用线程池时，也可以基于ThreadFactory（线程工厂）创建，在创建新线程池时可</li></ul><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads, ThreadFactory)</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> </span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="keyword">package</span> threadpool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateThreadPollDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> SLEEP_GAP=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TargetTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>{</span><br><span class="line">        <span class="keyword">static</span> AtomicInteger taskNo=<span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">        String taskName;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TargetTask</span><span class="params">()</span></span><br><span class="line">        {</span><br><span class="line">            taskName=<span class="string">"task-"</span>+taskNo;</span><br><span class="line">            taskNo.incrementAndGet();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">        {   </span><br><span class="line">            </span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">": "</span>+taskName+<span class="string">" is doing..."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(SLEEP_GAP);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(taskName+<span class="string">" end..."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SimpleThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span>{</span><br><span class="line">        <span class="keyword">static</span> AtomicInteger threadNo=<span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable task)</span> {</span><br><span class="line">           String threadName=<span class="string">"simpleThread-"</span>+threadNo;</span><br><span class="line">           System.out.println(<span class="string">"创建一条线程，名字是："</span>+threadName);</span><br><span class="line">           threadNo.incrementAndGet();</span><br><span class="line">           Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(task,threadName);</span><br><span class="line">           thread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">           <span class="keyword">return</span> thread;</span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">     ExecutorService pool=Executors.newFixedThreadPool(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">SimpleThreadFactory</span>());</span><br><span class="line">     <span class="comment">// ExecutorService pool=Executors.newFixedThreadPool(2);</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">      {</span><br><span class="line">          pool.submit(<span class="keyword">new</span> <span class="title class_">TargetTask</span>());</span><br><span class="line">      }</span><br><span class="line">     </span><br><span class="line">    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    pool.shutdown();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><img src="/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVBhbmRhQEdQRg==,size_18,color_FFFFFF,t_70,g_se,x_16-16612221312074.png" class="" title="在这里插入图片描述"><p>使用默认线程工厂的情况如下：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">     <span class="comment">//ExecutorService pool=Executors.newFixedThreadPool(2,new SimpleThreadFactory());</span></span><br><span class="line">     ExecutorService pool=Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">      {</span><br><span class="line">          pool.submit(<span class="keyword">new</span> <span class="title class_">TargetTask</span>());</span><br><span class="line">      }</span><br><span class="line">     </span><br><span class="line">    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    pool.shutdown();</span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></tbody></table></figure><img src="/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/34e9455470cf4be6936a2955228b27c0.png" class="" title="在这里插入图片描述"><p>线程工厂和线程池工厂：<br>Executors为线程池工厂类，用于快捷创建线程池（Thread Pool）；ThreadFactory为线程工厂类，用于创建线程（Thread）</p><hr><h2 id="8-任务阻塞队列"><a href="#8-任务阻塞队列" class="headerlink" title="8. 任务阻塞队列"></a>8. 任务阻塞队列</h2><p>特点：在一个线程从一个空的阻塞队列中获取元素时线程会被阻塞，直到阻塞队列中有了元素；当队列中有元素后，被阻塞的线程会自动被唤醒</p><p>常见的几种阻塞队列的实现：</p><ol><li>ArrayBlockingQueue：是一个数组实现的有界阻塞队列（有界队列），队列中的元素按FIFO排序，ArrayBlockingQueue在创建时必须设置大小</li><li>LinkedBlockingQueue：是一个基于链表实现的阻塞队列，按FIFO排序任务，可以设置容量（有界队列），不设置容量则默认使用Integer.Max_VALUE作为容量（无界队列）</li><li>PriorityBlockingQueue：是具有优先级的无界队列</li></ol><hr><h2 id="9-调度器的钩子方法"><a href="#9-调度器的钩子方法" class="headerlink" title="9. 调度器的钩子方法"></a>9. 调度器的钩子方法</h2><blockquote><p>三个钩子方法存在于ThreadPoolExecutor类，这3个方法都是空方法，一般会在子类中重写</p></blockquote><p><code>protected void beforeExecute(Thread t, Runnable r) { }</code>: 任务执行之前的钩子方法<br><code>protected void afterExecute(Runnable r, Throwable t) { }</code>： 任务执行之后的钩子方法<br><code>protected void terminated() { }</code>： 线程池终止时的钩子方法</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> threadpool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateThreadPollDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> SLEEP_GAP=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TargetTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>{</span><br><span class="line">        <span class="keyword">static</span> AtomicInteger taskNo=<span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">        String taskName;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TargetTask</span><span class="params">()</span></span><br><span class="line">        {</span><br><span class="line">            taskName=<span class="string">"task-"</span>+taskNo;</span><br><span class="line">            taskNo.incrementAndGet();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">        {   </span><br><span class="line">            </span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">": "</span>+taskName+<span class="string">" is doing..."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(SLEEP_GAP);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(taskName+<span class="string">" end..."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SimpleThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span>{</span><br><span class="line">        <span class="keyword">static</span> AtomicInteger threadNo=<span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable task)</span> {</span><br><span class="line">           String threadName=<span class="string">"simpleThread-"</span>+threadNo;</span><br><span class="line">           System.out.println(<span class="string">"创建一条线程，名字是："</span>+threadName);</span><br><span class="line">           threadNo.incrementAndGet();</span><br><span class="line">           Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(task,threadName);</span><br><span class="line">           thread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">           <span class="keyword">return</span> thread;</span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">   </span><br><span class="line">    ExecutorService pool=<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">60</span>,TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">2</span>)){</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">terminated</span><span class="params">()</span></span><br><span class="line">        {</span><br><span class="line">            System.out.println(<span class="string">"调度器已停止..."</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeExecute</span><span class="params">(Thread t,Runnable target)</span></span><br><span class="line">        {</span><br><span class="line">            System.out.println(<span class="string">"前钩执行..."</span>);</span><br><span class="line">            <span class="built_in">super</span>.beforeExecute(t, target);</span><br><span class="line">        }</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterExecute</span><span class="params">(Runnable target,Throwable t)</span></span><br><span class="line">        {</span><br><span class="line">            System.out.println(<span class="string">"后钩执行..."</span>);</span><br><span class="line">            <span class="built_in">super</span>.afterExecute(target, t);</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">        pool.execute(<span class="keyword">new</span> <span class="title class_">TargetTask</span>());</span><br><span class="line">    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    pool.shutdown();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><img src="/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVBhbmRhQEdQRg==,size_13,color_FFFFFF,t_70,g_se,x_16.png" class="" title="在这里插入图片描述"><hr><h2 id="10-线程池的拒绝策略"><a href="#10-线程池的拒绝策略" class="headerlink" title="10. 线程池的拒绝策略"></a>10. 线程池的拒绝策略</h2><p>拒绝情况：</p><ol><li>线程池已经被关闭</li><li>工作队列已满且maximumPoolSize已满</li></ol><p>几种常见的拒绝策略：</p><img src="/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVBhbmRhQEdQRg==,size_20,color_FFFFFF,t_70,g_se,x_16-16612221312085.png" class="" title="在这里插入图片描述"><ol><li>AbortPolicy：拒绝策略</li></ol><blockquote><p>新任务就会被拒绝，并且抛出RejectedExecutionException异常。该策略是线程池默认的拒绝策略</p></blockquote><ol><li>DiscardPolicy：抛弃策略</li></ol><blockquote><p>新任务就会直接被丢掉，并且不会有任何异常抛出</p></blockquote><ol><li>DiscardOldestPolicy：抛弃最老任务策略</li></ol><blockquote><p>将最早进入队列的任务抛弃，从队列中腾出空间，再尝试加入队列(一般队头元素最老)</p></blockquote><ol><li>CallerRunsPolicy：调用者执行策略</li></ol><blockquote><p>新任务被添加到线程池时，如果添加失败，那么提交任务线程会自己去执行该任务，不会使用线程池中的线程去执行新任务</p></blockquote><ol><li>自定义策略</li></ol><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> threadpool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RejectedExecutionHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateThreadPollDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> SLEEP_GAP=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TargetTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>{</span><br><span class="line">        <span class="keyword">static</span> AtomicInteger taskNo=<span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">        String taskName;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TargetTask</span><span class="params">()</span></span><br><span class="line">        {</span><br><span class="line">            taskName=<span class="string">"task-"</span>+taskNo;</span><br><span class="line">            taskNo.incrementAndGet();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">        {   </span><br><span class="line">            </span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">": "</span>+taskName+<span class="string">" is doing..."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(SLEEP_GAP);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(taskName+<span class="string">" end..."</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SimpleThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span>{</span><br><span class="line">        <span class="keyword">static</span> AtomicInteger threadNo=<span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable task)</span> {</span><br><span class="line">           String threadName=<span class="string">"simpleThread-"</span>+threadNo;</span><br><span class="line">           System.out.println(<span class="string">"创建一条线程，名字是："</span>+threadName);</span><br><span class="line">           threadNo.incrementAndGet();</span><br><span class="line">           Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(task,threadName);</span><br><span class="line">           thread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">           <span class="keyword">return</span> thread;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CustomerIgnorePolicy</span> <span class="keyword">implements</span> <span class="title class_">RejectedExecutionHandler</span>{</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> {</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"-rejected;  taskCount-"</span>+executor.getTaskCount());</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="type">int</span> corePoolSize=<span class="number">2</span>;<span class="comment">//核心线程数</span></span><br><span class="line">        <span class="type">int</span> maximumPoolSize=<span class="number">4</span>;<span class="comment">//最大线程数</span></span><br><span class="line">        <span class="type">long</span> keepAlive=<span class="number">10</span>;<span class="comment">//空闲时间</span></span><br><span class="line">        TimeUnit unit=TimeUnit.SECONDS;<span class="comment">//时间单位</span></span><br><span class="line">        BlockingQueue&lt;Runnable&gt; workQueue=<span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">2</span>);<span class="comment">//阻塞队列</span></span><br><span class="line">        ThreadFactory factory=<span class="keyword">new</span> <span class="title class_">SimpleThreadFactory</span>();<span class="comment">//自定义线程工厂</span></span><br><span class="line">        RejectedExecutionHandler policy=<span class="keyword">new</span> <span class="title class_">CustomerIgnorePolicy</span>();<span class="comment">//自定义拒绝策略</span></span><br><span class="line">        ThreadPoolExecutor pool=<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(corePoolSize,maximumPoolSize,keepAlive,unit,workQueue,factory,policy);</span><br><span class="line">       </span><br><span class="line">     pool.prestartAllCoreThreads();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">        pool.execute(<span class="keyword">new</span> <span class="title class_">TargetTask</span>());</span><br><span class="line">    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    pool.shutdown();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><img src="/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVBhbmRhQEdQRg==,size_20,color_FFFFFF,t_70,g_se,x_16-16612221312086.png" class="" title="在这里插入图片描述"><hr><h2 id="11-线程池的关闭"><a href="#11-线程池的关闭" class="headerlink" title="11. 线程池的关闭"></a>11. 线程池的关闭</h2><p>线程池的5种状态：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RUNNING</span>    <span class="operator">=</span> -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHUTDOWN</span>   <span class="operator">=</span>  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STOP</span>       <span class="operator">=</span>  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TIDYING</span>    <span class="operator">=</span>  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TERMINATED</span> <span class="operator">=</span>  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></tbody></table></figure><ol><li>RUNNING: 线程池创建之后的初始状态，这种状态下可以执行任务</li><li>SHUTDOWN：该状态下线程池不再接受新任务，但是会将工作队列中的任务执行完毕</li><li>STOP：该状态下线程池不再接受新任务，也不会处理工作队列中的剩余任务，并且将会中断所有工作线程</li><li>TIDYING：该状态下所有任务都已终止或者处理完成，将会执行terminated()钩子方法</li><li>TERMINATED：执行完terminated()钩子方法之后的状态</li></ol><p><strong>几种状态的转换：</strong></p><img src="/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVBhbmRhQEdQRg==,size_20,color_FFFFFF,t_70,g_se,x_16-16612221312087.png" class="" title="在这里插入图片描述"><p><strong>几种关闭线程池的方法：</strong></p><ol><li>shutdown()方法</li></ol><blockquote><p>等待当前工作队列中的剩余任务全部执行完成之后，才会执行关闭，但是此方法被调用之后线程池的状态转为SHUTDOWN，线程池不会再接收新的任务</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> {</span><br><span class="line">       <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">       mainLock.lock();</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">           checkShutdownAccess();<span class="comment">//检测权限</span></span><br><span class="line">           advanceRunState(SHUTDOWN);<span class="comment">//设置线程池状态</span></span><br><span class="line">           interruptIdleWorkers();<span class="comment">//中断空闲线程</span></span><br><span class="line">           onShutdown(); <span class="comment">// 钩子函数，用于清理一些资源</span></span><br><span class="line">       } <span class="keyword">finally</span> {</span><br><span class="line">           mainLock.unlock();</span><br><span class="line">       }</span><br><span class="line">       tryTerminate();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><ol><li>shutdownNow()方法</li></ol><blockquote><p>立即关闭线程池的方法，此方法会打断正在执行的工作线程，并且会清空当前工作队列中的剩余任务，返回的是尚未执行的任务</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Runnable&gt; <span class="title function_">shutdownNow</span><span class="params">()</span> {</span><br><span class="line">       List&lt;Runnable&gt; tasks;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">       mainLock.lock();</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">           checkShutdownAccess();<span class="comment">//检测权限</span></span><br><span class="line">           advanceRunState(STOP);<span class="comment">//设置线程池状态</span></span><br><span class="line">           interruptWorkers();<span class="comment">//中断所有线程（工作线程以及空闲线程）</span></span><br><span class="line">           tasks = drainQueue();<span class="comment">//丢弃工作队列中的剩余任务</span></span><br><span class="line">       } <span class="keyword">finally</span> {</span><br><span class="line">           mainLock.unlock();</span><br><span class="line">       }</span><br><span class="line">       tryTerminate();</span><br><span class="line">       <span class="keyword">return</span> tasks;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><ol><li>awaitTermination()方法</li></ol><blockquote><p>等待线程池完成关闭, shutdown()与shutdownNow()方法之后，用户程序都不会主动等待线程池关闭完成</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">awaitTermination</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line">        <span class="keyword">throws</span> InterruptedException {</span><br><span class="line">        <span class="type">long</span> <span class="variable">nanos</span> <span class="operator">=</span> unit.toNanos(timeout);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">for</span> (;;) {</span><br><span class="line">                <span class="keyword">if</span> (runStateAtLeast(ctl.get(), TERMINATED))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                nanos = termination.awaitNanos(nanos);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>在设置的时间timeout内如果线程池完成关闭，返回true, 否则返回false</p><img src="/2022/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/08/23/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAQ29kZVBhbmRhQEdQRg==,size_20,color_FFFFFF,t_70,g_se,x_16-16612221312088.png" class="" title="在这里插入图片描述">]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea2021.3以下破解</title>
      <link href="/2022/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/"/>
      <url>/2022/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>1.双击桌面【IntelliJ IDEA 2021.3.1】图标启动软件。</p><img src="/2022/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/640-16611534994063.png" class="" title="图片"><p>2.勾选【I confirm……】，点击【Continue】。</p><img src="/2022/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/640-16611534994074.png" class="" title="图片"><p>3.点击【Don’t Send】。</p><img src="/2022/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/640-16611534994075.png" class="" title="图片"><p>4.点击【Start Trial】，点击【Srart Trial】。</p><img src="/2022/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/640-16611534994076.png" class="" title="图片"><p>温馨提示：通常点击“Start Trial”后需要登录自己的JetBrains账户，第一次使用该产品的用户可点击“log in……”打开网页根据提示免费注册（如下图所示）。</p><img src="/2022/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/640-16611534994077.png" class="" title="图片"><p>5.点击【Close】。</p><img src="/2022/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/640-16611534994078.png" class="" title="图片"><p>6.点击【设置】图标，选择【Edit Custom VM Options……】。</p><img src="/2022/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/640-16611534994079.png" class="" title="图片"><p>7.将破解文件中的 Crack\ja-netfilter 复制到自己想要的位置</p><p>8.输入【-javaagent:复制到的位置\\ja-netfilter.jar】， 点击【Save】。</p><img src="/2022/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/640-166115349940710.png" class="" title="图片"><p>9.安装成功！</p><img src="/2022/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/08/22/idea2021-3%E4%BB%A5%E4%B8%8B%E7%A0%B4%E8%A7%A3/640-166115349940711.png" class="" title="图片">]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> idea破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springCloud简介</title>
      <link href="/2022/08/11/springCloud%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/08/11/springCloud%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring-Cloud简介"><a href="#1-Spring-Cloud简介" class="headerlink" title="1. Spring Cloud简介"></a>1. Spring Cloud简介</h1><p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><img src="/2022/08/11/springCloud%E7%AE%80%E4%BB%8B/08/11/springCloud%E7%AE%80%E4%BB%8B/805b11709a18a023404631d8e80d9aaeab9eb3f6.jpg" class="" title="img"><h2 id="1-1-为什么考虑Spring-Cloud"><a href="#1-1-为什么考虑Spring-Cloud" class="headerlink" title="1.1 为什么考虑Spring Cloud"></a>1.1 为什么考虑Spring Cloud</h2><ul><li>Spring Cloud来源于Spring，质量、稳定性、持续性都可以得到保证</li><li>Spirng Cloud天然支持Spring Boot，更加便于业务落地。</li><li>Spring Cloud发展非常的快，从16年开始接触的时候相关组件版本为1.x，到现在将要发布2.x系列</li><li>Spring Cloud是Java领域最适合做微服务的框架。</li><li>相比于其它框架,Spring Cloud对微服务周边环境的支持力度最大。</li><li>对于中小企业来讲，使用门槛较低。</li></ul><h2 id="1-2-Spring-Cloud的特性"><a href="#1-2-Spring-Cloud的特性" class="headerlink" title="1.2 Spring Cloud的特性"></a>1.2 Spring Cloud的特性</h2><ul><li>分布式/版本化配置</li><li>服务注册和发现</li><li>服务路由</li><li>服务和服务之间的调用</li><li>负载均衡</li><li>服务熔断与服务降级</li><li>分布式消息传递（MQ）</li></ul><p>Spring Cloud的这些特性都是由不同的组件来完成，在架构的演进过程中扮演着重要的角色，接下来我们一起看看。</p><h1 id="2-Spring-Cloud体系工具框架"><a href="#2-Spring-Cloud体系工具框架" class="headerlink" title="2. Spring Cloud体系工具框架"></a>2. Spring Cloud体系工具框架</h1><p>Spring Cloud共集成了19个子项目，里面都包含一个或者多个第三方的组件或者框架！<br><strong>Spring Cloud 体系包含以下工具框架：</strong><br>1、<strong>Spring Cloud Config</strong> 配置中心，利用git集中管理程序的配置。<br>2、<strong>Spring Cloud Netflix</strong> 集成众多Netflix的开源软件<br>3、<strong>Spring Cloud Bus</strong> 消息总线，利用分布式消息将服务和服务实例连接在一起，用于在一个集群中传播状态的变化<br>4、<strong>Spring Cloud for Cloud Foundry</strong> 利用Pivotal Cloudfoundry集成你的应用程序<br>5、<strong>Spring Cloud Cloud Foundry Service Broker</strong> 为建立管理云托管服务的服务代理提供了一个起点。<br>6、<strong>Spring Cloud Cluster</strong> 基于Zookeeper, Redis, Hazelcast, Consul实现的领导选举和平民状态模式的抽象和实现。<br>7、<strong>Spring Cloud Consul</strong> 基于Hashicorp Consul实现的服务发现和配置管理。<br>8、<strong>Spring Cloud Security</strong> 在Zuul代理中为OAuth2 rest客户端和认证头转发提供负载均衡<br>9、<strong>Spring Cloud Sleuth</strong> SpringCloud应用的分布式追踪系统，和Zipkin，HTrace，ELK兼容。<br>10、<strong>Spring Cloud Data Flow</strong> 一个云本地程序和操作模型，组成数据微服务在一个结构化的平台上。<br>11、<strong>Spring Cloud Stream</strong> 基于Redis,Rabbit,Kafka实现的消息微服务，简单声明模型用以在Spring Cloud应用中收发消息。<br>12、<strong>Spring Cloud Stream App Starters</strong> 基于Spring Boot为外部系统提供spring的集成<br>13、<strong>Spring Cloud Task</strong> 短生命周期的微服务，为SpringBooot应用简单声明添加功能和非功能特性。<br>14、<strong>Spring Cloud Task App Starters</strong><br>15、<strong>Spring Cloud Zookeeper</strong> 服务发现和配置管理基于Apache Zookeeper。<br>16、<strong>Spring Cloud for Amazon Web Services</strong> 快速和亚马逊网络服务集成。<br>17、<strong>Spring Cloud Connectors</strong> 便于PaaS应用在各种平台上连接到后端像数据库和消息经纪服务。<br>18、<strong>Spring Cloud Starters</strong> （项目已经终止并且在Angel.SR2后的版本和其他项目合并）<br>19、<strong>Spring Cloud CLI</strong> 插件用Groovy快速的创建Spring Cloud组件应用。<br>下面将会介绍几个Spring Cloud体系中的重要组件。</p><h2 id="2-1-Spring-Cloud-Netflix-Eureka"><a href="#2-1-Spring-Cloud-Netflix-Eureka" class="headerlink" title="2.1 Spring Cloud Netflix Eureka"></a>2.1 Spring Cloud Netflix Eureka</h2><p>Eureka是Netflix开源的一款提供服务注册和发现的产品，它提供了完整的Service Registry和Service Discovery实现。也是Spring Cloud体系中最重要最核心的组件之一。<br>Eureka是Spring Cloud体系的服务中心，将所有的可以提供的服务都注册到它这里来管理，其它各调用者需要的时候去注册中心获取，然后再进行调用，避免了服务之间的直接调用，方便后续的水平扩展、故障转移等。如下图：</p><img src="/2022/08/11/springCloud%E7%AE%80%E4%BB%8B/08/11/springCloud%E7%AE%80%E4%BB%8B/c3fe1cd64976be3c49dc279d05d9f9e74612f0c8.jpg" class="" title="img"><p>当然服务中心这么重要的组件一但挂掉将会影响全部服务，因此需要搭建Eureka集群来保持高可用性，生产中建议最少两台。随着系统的流量不断增加，需要根据情况来扩展某个服务，Eureka内部已经提供均衡负载的功能，只需要增加相应的服务端实例既可。那么在系统的运行期间某个实例挂了怎么办？Eureka内容有一个心跳检测机制，如果某个实例在规定的时间内没有进行通讯则会自动被剔除掉，避免了某个实例挂掉而影响服务。<br>因此使用了Eureka就自动具有了注册中心、负载均衡、故障转移的功能。</p><h2 id="2-2-Spring-Cloud-Hystrix-熔断器"><a href="#2-2-Spring-Cloud-Hystrix-熔断器" class="headerlink" title="2.2 Spring Cloud Hystrix 熔断器"></a>2.2 Spring Cloud Hystrix 熔断器</h2><p>在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障，进而造成整个系统不可用的情况，这种现象被称为服务雪崩效应。服务雪崩效应是一种因“服务提供者”的不可用导致“服务消费者”的不可用,并将不可用逐渐放大的过程。<br>如下图所示：A作为服务提供者，B为A的服务消费者，C和D是B的服务消费者。A不可用引起了B的不可用，并将不可用像滚雪球一样放大到C和D时，雪崩效应就形成了。</p><img src="/2022/08/11/springCloud%E7%AE%80%E4%BB%8B/08/11/springCloud%E7%AE%80%E4%BB%8B/8d2a1d9462e66464d5512cb3f2de9f0c48862a53.jpg" class="" title="img"><p>在这种情况下就需要整个服务机构具有故障隔离的功能，避免某一个服务挂掉影响全局。在Spring Cloud 中Hystrix组件就扮演这个角色。</p><p>Hystrix是Spring Cloud体系中的一个分布式系统限流、降级、熔断框架，Hystrix会在某个服务连续调用N次不响应的情况下，立即通知调用端调用失败，避免调用端持续等待而影响了整体服务。Hystrix间隔时间会再次检查此服务，如果服务恢复将继续提供服务。</p><img src="/2022/08/11/springCloud%E7%AE%80%E4%BB%8B/08/11/springCloud%E7%AE%80%E4%BB%8B/3b799459ebb1c37c78e362b7c1b76d4ce9a3f6b5.jpg" class="" title="img"><p>Hystrix断路器可以防止一个应用程序多次试图执行一个操作，即很可能失败，允许它继续而不等待故障恢复或者浪费 CPU 周期，而它确定该故障是持久的。断路器模式也使应用程序能够检测故障是否已经解决。如果问题似乎已经得到纠正，应用程序可以尝试调用操作。</p><h2 id="2-3-Spring-Cloud-Config"><a href="#2-3-Spring-Cloud-Config" class="headerlink" title="2.3 Spring Cloud Config"></a>2.3 Spring Cloud Config</h2><p>Spring Cloud Config是一个解决分布式系统的配置管理方案。它包含了Client和Server两个部分，Server提供配置文件的存储、以接口的形式将配置文件的内容提供出去，Client通过接口获取数据、并依据此数据初始化自己的应用。</p><img src="/2022/08/11/springCloud%E7%AE%80%E4%BB%8B/08/11/springCloud%E7%AE%80%E4%BB%8B/8d2a1d9462e66464d5512cb3f2de9f0c48862a53.jpg" class="" title="8d2a1d9462e66464d5512cb3f2de9f0c48862a53"><p>其实就是Server端将所有的配置文件服务化，需要配置文件的服务实例去Config Server获取对应的数据。将所有的配置文件统一整理，避免了配置文件碎片化。<br>如果服务运行期间改变配置文件，服务是不会得到最新的配置信息，需要解决这个问题就需要引入Refresh。可以在服务的运行期间重新加载配置文件。<br>当所有的配置文件都存储在配置中心的时候，配置中心就成为了一个非常重要的组件。如果配置中心出现问题将会导致灾难性的后果，因此在生产中建议对配置中心做集群，来支持配置中心高可用性。</p><h2 id="2-4-Spring-Cloud-Zuul"><a href="#2-4-Spring-Cloud-Zuul" class="headerlink" title="2.4 Spring Cloud Zuul"></a>2.4 Spring Cloud Zuul</h2><p>Spring Cloud Zuul是Netflix开源的微服务网关，他可以和Eureka,Ribbon,Hystrix等组件配合使用。Zuul组件的核心是一系列的过滤器，这些过滤器可以完成以下功能：</p><ul><li>身份认证和安全: 识别每一个资源的验证要求，并拒绝那些不符的请求</li><li>审查与监控</li><li>动态路由：动态将请求路由到不同后端集群</li><li>压力测试：逐渐增加指向集群的流量，以了解性能</li><li>负载分配：为每一种负载类型分配对应容量，并弃用超出限定值的请求</li><li>静态响应处理：边缘位置进行响应，避免转发到内部集群</li><li>多区域弹性：跨域AWS Region进行请求路由，旨在实现ELB(ElasticLoad Balancing)使用多样化</li></ul><img src="/2022/08/11/springCloud%E7%AE%80%E4%BB%8B/08/11/springCloud%E7%AE%80%E4%BB%8B/26f8b1ad7128896e35e88859c60a92dad03c52f2.jpg" class="" title="img"><h2 id="2-5-Spring-Cloud-Ribbon"><a href="#2-5-Spring-Cloud-Ribbon" class="headerlink" title="2.5 Spring Cloud Ribbon"></a>2.5 Spring Cloud Ribbon</h2><p>Spring Cloud Ribbon组件主要用于提供客户侧的软件负载均衡算法。</p><img src="/2022/08/11/springCloud%E7%AE%80%E4%BB%8B/08/11/springCloud%E7%AE%80%E4%BB%8B/47bb0723f1cca5a649ab4fa956d479fa56092d0b.jpg" class="" title="img"><p>Ribbon客户端组件提供一系列完善的配置选项，比如连接超时、重试、重试算法等。Ribbon内置可插拔、可定制的负载均衡组件。下面是用到的一些负载均衡策略：</p><ul><li>简单轮询负载均衡</li><li>加权响应时间负载均衡</li><li>区域感知轮询负载均衡</li><li>随机负载均衡</li></ul><p>Ribbon中还包括以下功能：</p><ul><li>易于与服务发现组件（比如Netflix的Eureka）集成</li><li>使用Archaius完成运行时配置</li><li>使用JMX暴露运维指标，使用Servo发布</li><li>多种可插拔的序列化选择</li><li>异步和批处理操作（即将推出）</li><li>自动SLA框架（即将推出）</li><li>系统管理/指标控制台（即将推出）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java23种设计模式</title>
      <link href="/2022/08/10/java23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/10/java23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="一、设计模式概念"><a href="#一、设计模式概念" class="headerlink" title="一、设计模式概念"></a>一、设计模式概念</h1><h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><p> Java包含23种设计模式，是一套对代码设计经验的总结，被人们反复利用，多人熟知的代码设计方式。</p><h2 id="2、目的"><a href="#2、目的" class="headerlink" title="2、目的"></a>2、目的</h2><p> 为了提高代码的可读性，可扩展性以及代码的复用性，为了解决在写代码过程中遇到的代码设计问题。</p><h2 id="3、设计模式的六大原则"><a href="#3、设计模式的六大原则" class="headerlink" title="3、设计模式的六大原则"></a>3、设计模式的六大原则</h2><h3 id="3-1开闭原则"><a href="#3-1开闭原则" class="headerlink" title="3.1开闭原则"></a>3.1开闭原则</h3><p> 对扩展开放，对修改关闭（尽可能对代码少修改）</p><h3 id="3-2里氏替换原则"><a href="#3-2里氏替换原则" class="headerlink" title="3.2里氏替换原则"></a>3.2里氏替换原则</h3><p> 它是面向对象基本原则之一，任何父类（基类）出现的地方，子类都可以出现，也就是子类可以替换父类的任何功能（体现了父类的可扩展性）</p><h3 id="3-3依赖倒转原则"><a href="#3-3依赖倒转原则" class="headerlink" title="3.3依赖倒转原则"></a>3.3依赖倒转原则</h3><p> 尽可能面向接口编程，依赖接口而不依赖类</p><h3 id="3-4接口隔离原则"><a href="#3-4接口隔离原则" class="headerlink" title="3.4接口隔离原则"></a>3.4接口隔离原则</h3><p> 一个类如果能实现多个接口，尽可能实现多个，为了降低依赖，降低耦合</p><h3 id="3-5最少知道原则"><a href="#3-5最少知道原则" class="headerlink" title="3.5最少知道原则"></a>3.5最少知道原则</h3><p> 一个实体尽可能少的与其他实体产生相互关联关系，将实体的功能独立</p><h3 id="3-6合成复用原则"><a href="#3-6合成复用原则" class="headerlink" title="3.6合成复用原则"></a>3.6合成复用原则</h3><p> 尽量使用合成，聚合的方式，而不使用继承</p><h2 id="4、设计模式的分类"><a href="#4、设计模式的分类" class="headerlink" title="4、设计模式的分类"></a>4、设计模式的分类</h2><p><strong>Java设计模式分为三大类</strong></p><p><strong>创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程。</strong></p><p><strong>结构型模式：把类或对象结合在一起形成一个更大的结构。</strong></p><p><strong>行为型模式：类和对象如何交互，及划分责任和算法。</strong></p><p>如下图所示：</p><img src="/2022/08/10/java23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/08/10/java23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4a1352e959b8721de2d57410b6405998.png" class="" title="img">]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企微机器人流程设置</title>
      <link href="/2022/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="添加企业微信群机器人"><a href="#添加企业微信群机器人" class="headerlink" title="添加企业微信群机器人"></a>添加企业微信群机器人</h2><p>点击企业微信群里右上角 <strong>···</strong></p><img src="/2022/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16601125931767.png" class="" title="img"><p>选择添加机器人，获取添加后的机器人的WebHook地址</p><img src="/2022/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/image-20220810142457991.png" class="" title="image-20220810142457991"><h2 id="如何使用群机器人"><a href="#如何使用群机器人" class="headerlink" title="如何使用群机器人"></a>如何使用群机器人</h2><ul><li>在终端某个群组添加机器人之后，创建者可以在机器人详情页看的该机器人特有的webhookurl。开发者可以按以下说明a向这个地址发起HTTP POST 请求，即可实现给该群组发送消息。下面举个简单的例子.<br>假设webhook是：<a href="https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=693a91f6-7xxx-4bc4-97a0-0ec2sifa5aaa">https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=693a91f6-7xxx-4bc4-97a0-0ec2sifa5aaa</a></li></ul><blockquote><p>特别特别要注意：一定要<strong>保护好机器人的webhook地址</strong>，避免泄漏！不要分享到github、博客等可被公开查阅的地方，否则坏人就可以用你的机器人来发垃圾消息了。</p></blockquote><p>以下是用curl工具往群组推送文本消息的示例（注意要将url替换成你的机器人webhook地址，content必须是utf8编码）：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">curl 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=693axxx6-7aoc-4bc4-97a0-0ec2sifa5aaa' \   </span><br><span class="line">-H 'Content-Type: application/json' \   </span><br><span class="line">-d '   {        </span><br><span class="line">"msgtype": "text",        </span><br><span class="line">"text": {            </span><br><span class="line">"content": "hello world"        </span><br><span class="line">}   </span><br><span class="line">}'</span><br></pre></td></tr></tbody></table></figure><ul><li>当前自定义机器人支持文本（text）、markdown（markdown）、图片（image）、图文（news）四种消息类型。</li><li>机器人的text/markdown类型消息支持在content中使用&lt;@userid&gt;扩展语法来@群成员</li></ul><h2 id="消息类型及数据格式"><a href="#消息类型及数据格式" class="headerlink" title="消息类型及数据格式"></a>消息类型及数据格式</h2><h3 id="文本类型"><a href="#文本类型" class="headerlink" title="文本类型"></a>文本类型</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{    </span><br><span class="line">"msgtype": "text",    </span><br><span class="line">"text": {        </span><br><span class="line">"content": "广州今日天气：29度，大部分多云，降雨概率：60%",   </span><br><span class="line">"mentioned_list":["wangqing","@all"],       </span><br><span class="line">"mentioned_mobile_list":["13800001111","@all"]    </span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>参数</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>msgtype</td><td>是</td><td>消息类型，此时固定为text</td></tr><tr><td>content</td><td>是</td><td>文本内容，最长不超过2048个字节，必须是utf8编码</td></tr><tr><td>mentioned_list</td><td>否</td><td>userid的列表，提醒群中的指定成员(@某个成员)，@all表示提醒所有人，如果开发者获取不到userid，可以使用mentioned_mobile_list</td></tr><tr><td>mentioned_mobile_list</td><td>否</td><td>手机号列表，提醒手机号对应的群成员(@某个成员)，@all表示提醒所有人</td></tr></tbody></table><img src="/2022/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/0.png" class="" title="img"><h3 id="markdown类型"><a href="#markdown类型" class="headerlink" title="markdown类型"></a>markdown类型</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{    </span><br><span class="line">"msgtype": "markdown",    </span><br><span class="line">"markdown": {        </span><br><span class="line">"content": "实时新增用户反馈&lt;font color=\"warning\"&gt;132例&lt;/font&gt;，请相关同事注意。\n         </span><br><span class="line">&gt;类型:&lt;font color=\"comment\"&gt;用户反馈&lt;/font&gt;         </span><br><span class="line">&gt;普通用户反馈:&lt;font color=\"comment\"&gt;117例&lt;/font&gt;</span><br><span class="line">&gt;VIP用户反馈:&lt;font color=\"comment\"&gt;15例&lt;/font&gt;"    </span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>参数</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>msgtype</td><td>是</td><td>消息类型，此时固定为markdown</td></tr><tr><td>content</td><td>是</td><td>markdown内容，最长不超过4096个字节，必须是utf8编码</td></tr></tbody></table><img src="/2022/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/0-16601127522121.png" class="" title="img"><p>目前支持的markdown语法是如下的子集：</p><ol><li><p>标题 （支持1至6级标题，注意#与文字中间要有空格）</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 标题一## 标题二### 标题三#### 标题四##### 标题五###### 标题六</span><br></pre></td></tr></tbody></table></figure></li><li><p>加粗</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">**bold**</span><br></pre></td></tr></tbody></table></figure></li><li><p>链接</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[这是一个链接](http://work.weixin.qq.com/api/doc)</span><br></pre></td></tr></tbody></table></figure></li><li><p>行内代码段（暂不支持跨行）</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">`code`</span><br></pre></td></tr></tbody></table></figure></li><li><p>引用</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&gt; 引用文字</span><br></pre></td></tr></tbody></table></figure></li><li><p>字体颜色(只支持3种内置颜色)</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&lt;font color="info"&gt;绿色&lt;/font&gt;&lt;font color="comment"&gt;灰色&lt;/font&gt;&lt;font color="warning"&gt;橙红色&lt;/font&gt;</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="图片类型"><a href="#图片类型" class="headerlink" title="图片类型"></a>图片类型</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{    "msgtype": "image",    "image": {        "base64": "DATA",        "md5": "MD5"    }}</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>参数</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>msgtype</td><td>是</td><td>消息类型，此时固定为image</td></tr><tr><td>base64</td><td>是</td><td>图片内容的base64编码</td></tr><tr><td>md5</td><td>是</td><td>图片内容（base64编码前）的md5值</td></tr></tbody></table><blockquote><p>注：图片（base64编码前）最大不能超过2M，支持JPG,PNG格式</p></blockquote><img src="/2022/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/0-16601127522132.png" class="" title="img"><h3 id="图文类型"><a href="#图文类型" class="headerlink" title="图文类型"></a>图文类型</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">"msgtype": "news",</span><br><span class="line">"news": {</span><br><span class="line">"articles": [{</span><br><span class="line">"title": "中秋节礼品领取",</span><br><span class="line">"description": "今年中秋节公司有豪礼相送",</span><br><span class="line">"url": "www.qq.com",</span><br><span class="line">"picurl": "http://res.mail.qq.com/node/ww/wwopenmng/images/independent/doc/test_pic_msg1.png"</span><br><span class="line">}]</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>参数</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>msgtype</td><td>是</td><td>消息类型，此时固定为news</td></tr><tr><td>articles</td><td>是</td><td>图文消息，一个图文消息支持1到8条图文</td></tr><tr><td>title</td><td>是</td><td>标题，不超过128个字节，超过会自动截断</td></tr><tr><td>description</td><td>否</td><td>描述，不超过512个字节，超过会自动截断</td></tr><tr><td>url</td><td>是</td><td>点击后跳转的链接。</td></tr><tr><td>picurl</td><td>否</td><td>图文消息的图片链接，支持JPG、PNG格式，较好的效果为大图 1068<em>455，小图150</em>150。</td></tr></tbody></table><img src="/2022/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/0-16601127522133.png" class="" title="img"><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{    </span><br><span class="line">"msgtype": "file",    </span><br><span class="line">"file": {         </span><br><span class="line">"media_id": "3a8asd892asd8asd"    </span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>参数</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>msgtype</td><td>是</td><td>消息类型，此时固定为file</td></tr><tr><td>media_id</td><td>是</td><td>文件id，通过下文的文件上传接口获取</td></tr></tbody></table><img src="/2022/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/202005122030.3ce0bde714.png" class="" title="img"><h3 id="模版卡片类型"><a href="#模版卡片类型" class="headerlink" title="模版卡片类型"></a>模版卡片类型</h3><h4 id="文本通知模版卡片"><a href="#文本通知模版卡片" class="headerlink" title="文本通知模版卡片"></a>文本通知模版卡片</h4><img src="/2022/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/0-16601127522134.png" class="" title="img"><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">"msgtype": "template_card",</span><br><span class="line">"template_card": {</span><br><span class="line">"card_type": "text_notice",</span><br><span class="line">"source": {</span><br><span class="line">"icon_url": "https://wework.qpic.cn/wwpic/252813_jOfDHtcISzuodLa_1629280209/0",</span><br><span class="line">"desc": "企业微信",</span><br><span class="line">"desc_color": 0</span><br><span class="line">},</span><br><span class="line">"main_title": {</span><br><span class="line">"title": "欢迎使用企业微信",</span><br><span class="line">"desc": "您的好友正在邀请您加入企业微信"</span><br><span class="line">},</span><br><span class="line">"emphasis_content": {</span><br><span class="line">"title": "100",</span><br><span class="line">"desc": "数据含义"</span><br><span class="line">},</span><br><span class="line">"quote_area": {</span><br><span class="line">"type": 1,</span><br><span class="line">"url": "https://work.weixin.qq.com/?from=openApi",</span><br><span class="line">"appid": "APPID",</span><br><span class="line">"pagepath": "PAGEPATH",</span><br><span class="line">"title": "引用文本标题",</span><br><span class="line">"quote_text": "Jack：企业微信真的很好用~\nBalian：超级好的一款软件！"</span><br><span class="line">},</span><br><span class="line">"sub_title_text": "下载企业微信还能抢红包！",</span><br><span class="line">"horizontal_content_list": [</span><br><span class="line">{</span><br><span class="line">"keyname": "邀请人",</span><br><span class="line">"value": "张三"</span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">"keyname": "企微官网",</span><br><span class="line">"value": "点击访问",</span><br><span class="line">"type": 1,</span><br><span class="line">"url": "https://work.weixin.qq.com/?from=openApi"</span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">"keyname": "企微下载",</span><br><span class="line">"value": "企业微信.apk",</span><br><span class="line">"type": 2,</span><br><span class="line">"media_id": "MEDIAID"</span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line">"jump_list": [</span><br><span class="line">{</span><br><span class="line">"type": 1,</span><br><span class="line">"url": "https://work.weixin.qq.com/?from=openApi",</span><br><span class="line">"title": "企业微信官网"</span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">"type": 2,</span><br><span class="line">"appid": "APPID",</span><br><span class="line">"pagepath": "PAGEPATH",</span><br><span class="line">"title": "跳转小程序"</span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line">"card_action": {</span><br><span class="line">"type": 1,</span><br><span class="line">"url": "https://work.weixin.qq.com/?from=openApi",</span><br><span class="line">"appid": "APPID",</span><br><span class="line">"pagepath": "PAGEPATH"</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>请求参数</p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">msgtype</td><td align="left">String</td><td align="left">是</td><td align="left">消息类型，此时的消息类型固定为<code>template_card</code></td></tr><tr><td align="left">template_card</td><td align="left">Object</td><td align="left">是</td><td align="left">具体的模版卡片参数</td></tr></tbody></table><p>template_card的参数说明</p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">card_type</td><td align="left">String</td><td align="left">是</td><td align="left">模版卡片的模版类型，文本通知模版卡片的类型为<code>text_notice</code></td></tr><tr><td align="left">source</td><td align="left">Object</td><td align="left">否</td><td align="left">卡片来源样式信息，不需要来源样式可不填写</td></tr><tr><td align="left">source.icon_url</td><td align="left">String</td><td align="left">否</td><td align="left">来源图片的url</td></tr><tr><td align="left">source.desc</td><td align="left">String</td><td align="left">否</td><td align="left">来源图片的描述，建议不超过13个字</td></tr><tr><td align="left">source.desc_color</td><td align="left">Int</td><td align="left">否</td><td align="left">来源文字的颜色，目前支持：0(默认) 灰色，1 黑色，2 红色，3 绿色</td></tr><tr><td align="left">main_title</td><td align="left">Object</td><td align="left">是</td><td align="left">模版卡片的主要内容，包括一级标题和标题辅助信息</td></tr><tr><td align="left">main_title.title</td><td align="left">String</td><td align="left">否</td><td align="left">一级标题，建议不超过26个字。<strong>模版卡片主要内容的一级标题main_title.title和二级普通文本sub_title_text必须有一项填写</strong></td></tr><tr><td align="left">main_title.desc</td><td align="left">String</td><td align="left">否</td><td align="left">标题辅助信息，建议不超过30个字</td></tr><tr><td align="left">emphasis_content</td><td align="left">Object</td><td align="left">否</td><td align="left">关键数据样式</td></tr><tr><td align="left">emphasis_content.title</td><td align="left">String</td><td align="left">否</td><td align="left">关键数据样式的数据内容，建议不超过10个字</td></tr><tr><td align="left">emphasis_content.desc</td><td align="left">String</td><td align="left">否</td><td align="left">关键数据样式的数据描述内容，建议不超过15个字</td></tr><tr><td align="left">quote_area</td><td align="left">Object</td><td align="left">否</td><td align="left">引用文献样式，建议不与关键数据共用</td></tr><tr><td align="left">quote_area.type</td><td align="left">Int</td><td align="left">否</td><td align="left">引用文献样式区域点击事件，0或不填代表没有点击事件，1 代表跳转url，2 代表跳转小程序</td></tr><tr><td align="left">quote_area.url</td><td align="left">String</td><td align="left">否</td><td align="left">点击跳转的url，quote_area.type是1时必填</td></tr><tr><td align="left">quote_area.appid</td><td align="left">String</td><td align="left">否</td><td align="left">点击跳转的小程序的appid，quote_area.type是2时必填</td></tr><tr><td align="left">quote_area.pagepath</td><td align="left">String</td><td align="left">否</td><td align="left">点击跳转的小程序的pagepath，quote_area.type是2时选填</td></tr><tr><td align="left">quote_area.title</td><td align="left">String</td><td align="left">否</td><td align="left">引用文献样式的标题</td></tr><tr><td align="left">quote_area.quote_text</td><td align="left">String</td><td align="left">否</td><td align="left">引用文献样式的引用文案</td></tr><tr><td align="left">sub_title_text</td><td align="left">String</td><td align="left">否</td><td align="left">二级普通文本，建议不超过112个字。<strong>模版卡片主要内容的一级标题main_title.title和二级普通文本sub_title_text必须有一项填写</strong></td></tr><tr><td align="left">horizontal_content_list</td><td align="left">Object[]</td><td align="left">否</td><td align="left">二级标题+文本列表，该字段可为空数组，但有数据的话需确认对应字段是否必填，列表长度不超过6</td></tr><tr><td align="left">horizontal_content_list.type</td><td align="left">Int</td><td align="left">否</td><td align="left">链接类型，0或不填代表是普通文本，1 代表跳转url，2 代表下载附件，3 代表@员工</td></tr><tr><td align="left">horizontal_content_list.keyname</td><td align="left">String</td><td align="left">是</td><td align="left">二级标题，建议不超过5个字</td></tr><tr><td align="left">horizontal_content_list.value</td><td align="left">String</td><td align="left">否</td><td align="left">二级文本，如果horizontal_content_list.type是2，该字段代表文件名称（要包含文件类型），建议不超过26个字</td></tr><tr><td align="left">horizontal_content_list.url</td><td align="left">String</td><td align="left">否</td><td align="left">链接跳转的url，horizontal_content_list.type是1时必填</td></tr><tr><td align="left">horizontal_content_list.media_id</td><td align="left">String</td><td align="left">否</td><td align="left">附件的<a href="https://work.weixin.qq.com/wework_admin/roomrobot/msg?webhook_key=6368b421-844f-43e6-a847-c8b5dd7302ec&amp;version=4.0.8.6604&amp;platform=win#14404/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8E%A5%E5%8F%A3">media_id</a>，horizontal_content_list.type是2时必填</td></tr><tr><td align="left">horizontal_content_list.userid</td><td align="left">String</td><td align="left">否</td><td align="left">被@的成员的userid，horizontal_content_list.type是3时必填</td></tr><tr><td align="left">jump_list</td><td align="left">Object[]</td><td align="left">否</td><td align="left">跳转指引样式的列表，该字段可为空数组，但有数据的话需确认对应字段是否必填，列表长度不超过3</td></tr><tr><td align="left">jump_list.type</td><td align="left">Int</td><td align="left">否</td><td align="left">跳转链接类型，0或不填代表不是链接，1 代表跳转url，2 代表跳转小程序</td></tr><tr><td align="left">jump_list.title</td><td align="left">String</td><td align="left">是</td><td align="left">跳转链接样式的文案内容，建议不超过13个字</td></tr><tr><td align="left">jump_list.url</td><td align="left">String</td><td align="left">否</td><td align="left">跳转链接的url，jump_list.type是1时必填</td></tr><tr><td align="left">jump_list.appid</td><td align="left">String</td><td align="left">否</td><td align="left">跳转链接的小程序的appid，jump_list.type是2时必填</td></tr><tr><td align="left">jump_list.pagepath</td><td align="left">String</td><td align="left">否</td><td align="left">跳转链接的小程序的pagepath，jump_list.type是2时选填</td></tr><tr><td align="left">card_action</td><td align="left">Object</td><td align="left">是</td><td align="left">整体卡片的点击跳转事件，text_notice模版卡片中该字段为必填项</td></tr><tr><td align="left">card_action.type</td><td align="left">Int</td><td align="left">是</td><td align="left">卡片跳转类型，1 代表跳转url，2 代表打开小程序。text_notice模版卡片中该字段取值范围为[1,2]</td></tr><tr><td align="left">card_action.url</td><td align="left">String</td><td align="left">否</td><td align="left">跳转事件的url，card_action.type是1时必填</td></tr><tr><td align="left">card_action.appid</td><td align="left">String</td><td align="left">否</td><td align="left">跳转事件的小程序的appid，card_action.type是2时必填</td></tr><tr><td align="left">card_action.pagepath</td><td align="left">String</td><td align="left">否</td><td align="left">跳转事件的小程序的pagepath，card_action.type是2时选填</td></tr></tbody></table><h4 id="图文展示模版卡片"><a href="#图文展示模版卡片" class="headerlink" title="图文展示模版卡片"></a>图文展示模版卡片</h4><img src="/2022/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/08/10/%E4%BC%81%E5%BE%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%AE%BE%E7%BD%AE/0-16601127522135.png" class="" title="img"><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">"msgtype": "template_card",</span><br><span class="line">"template_card": {</span><br><span class="line">"card_type": "news_notice",</span><br><span class="line">"source": {</span><br><span class="line">"icon_url": "https://wework.qpic.cn/wwpic/252813_jOfDHtcISzuodLa_1629280209/0",</span><br><span class="line">"desc": "企业微信",</span><br><span class="line">"desc_color": 0</span><br><span class="line">},</span><br><span class="line">"main_title": {</span><br><span class="line">"title": "欢迎使用企业微信",</span><br><span class="line">"desc": "您的好友正在邀请您加入企业微信"</span><br><span class="line">},</span><br><span class="line">"card_image": {</span><br><span class="line">"url": "https://wework.qpic.cn/wwpic/354393_4zpkKXd7SrGMvfg_1629280616/0",</span><br><span class="line">"aspect_ratio": 2.25</span><br><span class="line">},</span><br><span class="line">"image_text_area": {</span><br><span class="line">"type": 1,</span><br><span class="line">"url": "https://work.weixin.qq.com",</span><br><span class="line">"title": "欢迎使用企业微信",</span><br><span class="line">"desc": "您的好友正在邀请您加入企业微信",</span><br><span class="line">"image_url": "https://wework.qpic.cn/wwpic/354393_4zpkKXd7SrGMvfg_1629280616/0"</span><br><span class="line">},</span><br><span class="line">"quote_area": {</span><br><span class="line">"type": 1,</span><br><span class="line">"url": "https://work.weixin.qq.com/?from=openApi",</span><br><span class="line">"appid": "APPID",</span><br><span class="line">"pagepath": "PAGEPATH",</span><br><span class="line">"title": "引用文本标题",</span><br><span class="line">"quote_text": "Jack：企业微信真的很好用~\nBalian：超级好的一款软件！"</span><br><span class="line">},</span><br><span class="line">"vertical_content_list": [</span><br><span class="line">{</span><br><span class="line">"title": "惊喜红包等你来拿",</span><br><span class="line">"desc": "下载企业微信还能抢红包！"</span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line">"horizontal_content_list": [</span><br><span class="line">{</span><br><span class="line">"keyname": "邀请人",</span><br><span class="line">"value": "张三"</span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">"keyname": "企微官网",</span><br><span class="line">"value": "点击访问",</span><br><span class="line">"type": 1,</span><br><span class="line">"url": "https://work.weixin.qq.com/?from=openApi"</span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">"keyname": "企微下载",</span><br><span class="line">"value": "企业微信.apk",</span><br><span class="line">"type": 2,</span><br><span class="line">"media_id": "MEDIAID"</span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line">"jump_list": [</span><br><span class="line">{</span><br><span class="line">"type": 1,</span><br><span class="line">"url": "https://work.weixin.qq.com/?from=openApi",</span><br><span class="line">"title": "企业微信官网"</span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">"type": 2,</span><br><span class="line">"appid": "APPID",</span><br><span class="line">"pagepath": "PAGEPATH",</span><br><span class="line">"title": "跳转小程序"</span><br><span class="line">}</span><br><span class="line">],</span><br><span class="line">"card_action": {</span><br><span class="line">"type": 1,</span><br><span class="line">"url": "https://work.weixin.qq.com/?from=openApi",</span><br><span class="line">"appid": "APPID",</span><br><span class="line">"pagepath": "PAGEPATH"</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>请求参数</p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">msgtype</td><td align="left">String</td><td align="left">是</td><td align="left">模版卡片的消息类型为<code>template_card</code></td></tr><tr><td align="left">template_card</td><td align="left">Object</td><td align="left">是</td><td align="left">具体的模版卡片参数</td></tr></tbody></table><p>template_card的参数说明</p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">card_type</td><td align="left">String</td><td align="left">是</td><td align="left">模版卡片的模版类型，图文展示模版卡片的类型为<code>news_notice</code></td></tr><tr><td align="left">source</td><td align="left">Object</td><td align="left">否</td><td align="left">卡片来源样式信息，不需要来源样式可不填写</td></tr><tr><td align="left">source.icon_url</td><td align="left">String</td><td align="left">否</td><td align="left">来源图片的url</td></tr><tr><td align="left">source.desc</td><td align="left">String</td><td align="left">否</td><td align="left">来源图片的描述，建议不超过13个字</td></tr><tr><td align="left">source.desc_color</td><td align="left">Int</td><td align="left">否</td><td align="left">来源文字的颜色，目前支持：0(默认) 灰色，1 黑色，2 红色，3 绿色</td></tr><tr><td align="left">main_title</td><td align="left">Object</td><td align="left">是</td><td align="left">模版卡片的主要内容，包括一级标题和标题辅助信息</td></tr><tr><td align="left">main_title.title</td><td align="left">String</td><td align="left">是</td><td align="left">一级标题，建议不超过26个字</td></tr><tr><td align="left">main_title.desc</td><td align="left">String</td><td align="left">否</td><td align="left">标题辅助信息，建议不超过30个字</td></tr><tr><td align="left">card_image</td><td align="left">Object</td><td align="left">是</td><td align="left">图片样式</td></tr><tr><td align="left">card_image.url</td><td align="left">String</td><td align="left">是</td><td align="left">图片的url</td></tr><tr><td align="left">card_image.aspect_ratio</td><td align="left">Float</td><td align="left">否</td><td align="left">图片的宽高比，宽高比要小于2.25，大于1.3，不填该参数默认1.3</td></tr><tr><td align="left">image_text_area</td><td align="left">Object</td><td align="left">否</td><td align="left">左图右文样式</td></tr><tr><td align="left">image_text_area.type</td><td align="left">Int</td><td align="left">否</td><td align="left">左图右文样式区域点击事件，0或不填代表没有点击事件，1 代表跳转url，2 代表跳转小程序</td></tr><tr><td align="left">image_text_area.url</td><td align="left">String</td><td align="left">否</td><td align="left">点击跳转的url，image_text_area.type是1时必填</td></tr><tr><td align="left">image_text_area.appid</td><td align="left">String</td><td align="left">否</td><td align="left">点击跳转的小程序的appid，必须是与当前应用关联的小程序，image_text_area.type是2时必填</td></tr><tr><td align="left">image_text_area.pagepath</td><td align="left">String</td><td align="left">否</td><td align="left">点击跳转的小程序的pagepath，image_text_area.type是2时选填</td></tr><tr><td align="left">image_text_area.title</td><td align="left">String</td><td align="left">否</td><td align="left">左图右文样式的标题</td></tr><tr><td align="left">image_text_area.desc</td><td align="left">String</td><td align="left">否</td><td align="left">左图右文样式的描述</td></tr><tr><td align="left">image_text_area.image_url</td><td align="left">String</td><td align="left">是</td><td align="left">左图右文样式的图片url</td></tr><tr><td align="left">quote_area</td><td align="left">Object</td><td align="left">否</td><td align="left">引用文献样式，建议不与关键数据共用</td></tr><tr><td align="left">quote_area.type</td><td align="left">Int</td><td align="left">否</td><td align="left">引用文献样式区域点击事件，0或不填代表没有点击事件，1 代表跳转url，2 代表跳转小程序</td></tr><tr><td align="left">quote_area.url</td><td align="left">String</td><td align="left">否</td><td align="left">点击跳转的url，quote_area.type是1时必填</td></tr><tr><td align="left">quote_area.appid</td><td align="left">String</td><td align="left">否</td><td align="left">点击跳转的小程序的appid，quote_area.type是2时必填</td></tr><tr><td align="left">quote_area.pagepath</td><td align="left">String</td><td align="left">否</td><td align="left">点击跳转的小程序的pagepath，quote_area.type是2时选填</td></tr><tr><td align="left">quote_area.title</td><td align="left">String</td><td align="left">否</td><td align="left">引用文献样式的标题</td></tr><tr><td align="left">quote_area.quote_text</td><td align="left">String</td><td align="left">否</td><td align="left">引用文献样式的引用文案</td></tr><tr><td align="left">vertical_content_list</td><td align="left">Object[]</td><td align="left">否</td><td align="left">卡片二级垂直内容，该字段可为空数组，但有数据的话需确认对应字段是否必填，列表长度不超过4</td></tr><tr><td align="left">vertical_content_list.title</td><td align="left">String</td><td align="left">是</td><td align="left">卡片二级标题，建议不超过26个字</td></tr><tr><td align="left">vertical_content_list.desc</td><td align="left">String</td><td align="left">否</td><td align="left">二级普通文本，建议不超过112个字</td></tr><tr><td align="left">horizontal_content_list</td><td align="left">Object[]</td><td align="left">否</td><td align="left">二级标题+文本列表，该字段可为空数组，但有数据的话需确认对应字段是否必填，列表长度不超过6</td></tr><tr><td align="left">horizontal_content_list.type</td><td align="left">Int</td><td align="left">否</td><td align="left">模版卡片的二级标题信息内容支持的类型，1是url，2是文件附件</td></tr><tr><td align="left">horizontal_content_list.keyname</td><td align="left">String</td><td align="left">是</td><td align="left">二级标题，建议不超过5个字</td></tr><tr><td align="left">horizontal_content_list.value</td><td align="left">String</td><td align="left">否</td><td align="left">二级文本，如果horizontal_content_list.type是2，该字段代表文件名称（要包含文件类型），建议不超过26个字</td></tr><tr><td align="left">horizontal_content_list.url</td><td align="left">String</td><td align="left">否</td><td align="left">链接跳转的url，horizontal_content_list.type是1时必填</td></tr><tr><td align="left">horizontal_content_list.media_id</td><td align="left">String</td><td align="left">否</td><td align="left">附件的<a href="https://work.weixin.qq.com/wework_admin/roomrobot/msg?webhook_key=6368b421-844f-43e6-a847-c8b5dd7302ec&amp;version=4.0.8.6604&amp;platform=win#14404/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8E%A5%E5%8F%A3">media_id</a>，horizontal_content_list.type是2时必填</td></tr><tr><td align="left">jump_list</td><td align="left">Object[]</td><td align="left">否</td><td align="left">跳转指引样式的列表，该字段可为空数组，但有数据的话需确认对应字段是否必填，列表长度不超过3</td></tr><tr><td align="left">jump_list.type</td><td align="left">Int</td><td align="left">否</td><td align="left">跳转链接类型，0或不填代表不是链接，1 代表跳转url，2 代表跳转小程序</td></tr><tr><td align="left">jump_list.title</td><td align="left">String</td><td align="left">是</td><td align="left">跳转链接样式的文案内容，建议不超过13个字</td></tr><tr><td align="left">jump_list.url</td><td align="left">String</td><td align="left">否</td><td align="left">跳转链接的url，jump_list.type是1时必填</td></tr><tr><td align="left">jump_list.appid</td><td align="left">String</td><td align="left">否</td><td align="left">跳转链接的小程序的appid，jump_list.type是2时必填</td></tr><tr><td align="left">jump_list.pagepath</td><td align="left">String</td><td align="left">否</td><td align="left">跳转链接的小程序的pagepath，jump_list.type是2时选填</td></tr><tr><td align="left">card_action</td><td align="left">Object</td><td align="left">是</td><td align="left">整体卡片的点击跳转事件，news_notice模版卡片中该字段为必填项</td></tr><tr><td align="left">card_action.type</td><td align="left">Int</td><td align="left">是</td><td align="left">卡片跳转类型，1 代表跳转url，2 代表打开小程序。news_notice模版卡片中该字段取值范围为[1,2]</td></tr><tr><td align="left">card_action.url</td><td align="left">String</td><td align="left">否</td><td align="left">跳转事件的url，card_action.type是1时必填</td></tr><tr><td align="left">card_action.appid</td><td align="left">String</td><td align="left">否</td><td align="left">跳转事件的小程序的appid，card_action.type是2时必填</td></tr><tr><td align="left">card_action.pagepath</td><td align="left">String</td><td align="left">否</td><td align="left">跳转事件的小程序的pagepath，card_action.type是2时选填</td></tr></tbody></table><h2 id="消息发送频率限制"><a href="#消息发送频率限制" class="headerlink" title="消息发送频率限制"></a>消息发送频率限制</h2><p>每个机器人发送的消息不能超过20条/分钟。</p><h2 id="文件上传接口"><a href="#文件上传接口" class="headerlink" title="文件上传接口"></a>文件上传接口</h2><blockquote><p>素材上传得到media_id，该media_id仅三天内有效<br>media_id只能是对应上传文件的机器人可以使用</p></blockquote><p><strong>请求方式：</strong>POST（<strong>HTTPS</strong>）<br><strong>请求地址：</strong><a href="https://qyapi.weixin.qq.com/cgi-bin/webhook/upload_media?key=KEY&amp;type=TYPE">https://qyapi.weixin.qq.com/cgi-bin/webhook/upload_media?key=KEY&amp;type=TYPE</a></p><p>使用multipart/form-data POST上传文件， 文件标识名为”media”<br><strong>参数说明：</strong></p><table><thead><tr><th>参数</th><th>必须</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>是</td><td>调用接口凭证, 机器人webhookurl中的key参数</td></tr><tr><td>type</td><td>是</td><td>固定传file</td></tr></tbody></table><p>POST的请求包中，form-data中媒体文件标识，应包含有 <strong>filename</strong>、filelength、content-type等信息</p><blockquote><p>filename标识文件展示的名称。比如，使用该media_id发消息时，展示的文件名由该字段控制</p></blockquote><p><strong>请求示例：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">POST https://qyapi.weixin.qq.com/cgi-bin/webhook/upload_media?key=693a91f6-7xxx-4bc4-97a0-0ec2sifa5aaa&amp;type=file HTTP/1.1Content-Type: multipart/form-data; boundary=-------------------------acebdf13572468Content-Length: 220---------------------------acebdf13572468Content-Disposition: form-data; name="media";filename="wework.txt"; filelength=6Content-Type: application/octet-streammytext---------------------------acebdf13572468--</span><br></pre></td></tr></tbody></table></figure><p><strong>返回数据：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">"errcode": 0,</span><br><span class="line">"errmsg": "ok",</span><br><span class="line">"type": "file",</span><br><span class="line">"media_id": "1G6nrLmr5EC3MMb_-zK1dDdzmd0p7cNliYu9V5w7o8K0",</span><br><span class="line">"created_at": "1380000000"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>参数说明：</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>媒体文件类型，分别有图片（image）、语音（voice）、视频（video），普通文件(file)</td></tr><tr><td>media_id</td><td>媒体文件上传后获取的唯一标识，3天内有效</td></tr><tr><td>created_at</td><td>媒体文件上传时间戳</td></tr></tbody></table><p><strong>上传的文件限制：</strong></p><ul><li>要求文件大小在5B~20M之间</li></ul><h2 id="傻瓜式操作机器人"><a href="#傻瓜式操作机器人" class="headerlink" title="傻瓜式操作机器人"></a>傻瓜式操作机器人</h2><p><a href="https://hiflow.tencent.com/">https://hiflow.tencent.com/</a>  腾讯Hiflow场景连接器</p>]]></content>
      
      
      
        <tags>
            
            <tag> 企业微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用方法</title>
      <link href="/2022/08/10/hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2022/08/10/hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>在vscode建立一个文件夹(例如0808prac)，右键打开终端，输入以下终端命令：<br>全局安装hexo：<strong>npm install -g hexo-cli</strong> （或者npm i -g hexo-cli）<br>查看是否安装成功：<strong>hexo -v</strong></p><p>安装成功显示如下图：<img src="/2022/08/10/hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/08/10/hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/20200808170347577.png" class="" title="image-20220810101118691"></p><h2 id="创建hexo博客"><a href="#创建hexo博客" class="headerlink" title="创建hexo博客"></a>创建hexo博客</h2><ul><li>创建项目：<strong>hexo init 文件名</strong> （例如hexo init my-blog）</li><li>进入创建好的项目：<strong>cd 文件名</strong> （例如cd my-blog）</li><li>安装依赖：<strong>npm inistall</strong> (或者npm i)<br>生成的文件如下：关于文件的描述说明在Hexo官网有详细说明，在这里就不赘述了</li></ul><img src="/2022/08/10/hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/08/10/hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/image-20220810101118691.png" class="" title="image-20220810101118691"><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>创建一篇新文章或者新的页面：<strong>hexo new 名字</strong> (例如hexo new hexo使用方法)<br>生成一个hexo使用方法.md文档和一个文件夹</p><img src="/2022/08/10/hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/08/10/hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/image-20220810101327738.png" class="" title="image-20220810101327738"><h2 id="发布博客网站"><a href="#发布博客网站" class="headerlink" title="发布博客网站"></a>发布博客网站</h2><p>详细文档参考：<a href="https://blog.17lai.site/posts/5311b619/#vercel-%E9%83%A8%E7%BD%B2">vercel 部署</a></p><h2 id="hexo配置文件"><a href="#hexo配置文件" class="headerlink" title="hexo配置文件"></a>hexo配置文件</h2><p>这篇文章主要是介绍一下站点配置文件中各配置项。</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site </span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span>       <span class="comment"># 网站的标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">''</span>      <span class="comment"># 网站子标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">''</span>   <span class="comment"># 网站的描述，主要用于SEO，告诉搜索引擎站点的描述</span></span><br><span class="line"><span class="attr">keywords:</span>  <span class="comment"># 网站的关键词，支持多个</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span>  <span class="comment"># 网站的作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span>  <span class="comment"># 网站采用的语言，中文可以设置为zh-CN，这里需要参考主题配置的languages目录来配置</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">''</span>  <span class="comment"># 网站的时区，默认使用电脑的时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://example.com</span>     <span class="comment"># 网站的网址，必须以http或https开头</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span>  <span class="comment"># 文章永久链接的形成模版。每一篇文章都有唯一的url</span></span><br><span class="line"><span class="attr">permalink_defaults:</span>    <span class="comment">#文章永久链接中，各部分的默认值。</span></span><br><span class="line"><span class="attr">pretty_urls:</span>   <span class="comment"># 改写 permalink 的值来美化 URL</span></span><br><span class="line">  <span class="comment"># 是否在永久链接中保留尾部的 index.html，设置为 false 时去除</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class="line">  <span class="comment"># 是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效)</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing '.html' from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span>          <span class="comment"># 资源文件夹，这个文件夹用来存放写的博客内容。</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span>          <span class="comment"># 公共文件夹，这个文件夹用于存放生成的站点文件。</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span>               <span class="comment"># 标签文件夹</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span>       <span class="comment"># 归档文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span>    <span class="comment"># 分类文件夹</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span>    <span class="comment"># Include code 文件夹，source_dir 下的子目录</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span>             <span class="comment"># 国际化（i18n）文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span>                <span class="comment"># 跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># 默认新建的文件名</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span>     <span class="comment"># 新建文档的默认布局</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span>  <span class="comment"># 是否要把标题中的首字符大写</span></span><br><span class="line"><span class="attr">external_link:</span>           </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>           <span class="comment"># 是否要在新开tab中打开链接</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span>     <span class="comment"># 对整个网站（site）生效或仅对文章（post）生效</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">''</span>            <span class="comment"># 需要排除的域名。主域名和子域名如 www 需分别配置</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span>         <span class="comment"># 把文件名称转换为 (1) 小写或 (2) 大写</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span>     <span class="comment"># 显示草稿</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span> <span class="comment"># 是否启用资源文件夹。如启用，新建文档同时建立同名的资源文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span>     <span class="comment"># 是否把站内资源的链接改为站内相对链接。建议关闭。</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span>             <span class="comment"># 文档中指定为未来时间创建</span></span><br><span class="line"><span class="attr">highlight:</span>               </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>           <span class="comment"># 是否开启代码高亮功能</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span>      <span class="comment"># 代码块中是否在前面加上行号</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span>     <span class="comment"># 是否自动检测代码块的语言（比如xml、JavaScript、mermaid等）</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">''</span>        <span class="comment"># 用什么字符来代替tab(`\t`)字符。</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span>                 </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">''</span>           <span class="comment"># 主页所在路径，默认为''</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span>       <span class="comment"># 主页的索引页包含文章数量，如未定义，则采用根目录下的`per_page`值</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span>    <span class="comment"># 文章（Post类型）排序属性，`-`为降序  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag  # 分类及标签</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span>   <span class="comment"># 对文档的默认分类</span></span><br><span class="line"><span class="attr">category_map:</span>                     <span class="comment"># 分类别名</span></span><br><span class="line"><span class="attr">tag_map:</span>  <span class="comment"># 标签别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span>      <span class="comment"># 日期格式</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span>        <span class="comment"># 时间格式</span></span><br><span class="line"><span class="comment">## updated_option supports 'mtime', 'date', 'empty'</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">'mtime'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span>            <span class="comment"># 每页显示的文章量 (0 = 关闭分页功能)</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span>    <span class="comment"># 分页目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理或不处理目录或文件</span></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the 'source/' folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span>   <span class="comment"># 主题配置，参考上一篇博客</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span>          <span class="comment"># 部署时的配置，参考上一篇博客</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">''</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作中的小问题</title>
      <link href="/2022/08/10/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2022/08/10/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>EFCore学习</title>
      <link href="/2022/07/27/EFCore%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/07/27/EFCore%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="EFCore学习"><a href="#EFCore学习" class="headerlink" title="EFCore学习"></a>EFCore学习</h1><p>[TOC]</p><h2 id="一、项目准备"><a href="#一、项目准备" class="headerlink" title="一、项目准备"></a>一、项目准备</h2><h3 id="1、添加相关Nuget包"><a href="#1、添加相关Nuget包" class="headerlink" title="1、添加相关Nuget包"></a>1、添加相关Nuget包</h3><img src="/2022/07/27/EFCore%E5%AD%A6%E4%B9%A0/07/27/EFCore%E5%AD%A6%E4%B9%A0/EFCoreNuget.png" class="" title="EFCoreNuget"><h3 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h3><p>创建名为Demo的空的解决方案。</p><p>创建Demo.app控制台项目。Demo.Data和Demo.Domain的类库</p><img src="/2022/07/27/EFCore%E5%AD%A6%E4%B9%A0/07/27/EFCore%E5%AD%A6%E4%B9%A0/EFCore%E7%9B%AE%E5%BD%95.png" class="" title="EFCore目录"><h3 id="3、编写实体类"><a href="#3、编写实体类" class="headerlink" title="3、编写实体类"></a>3、编写实体类</h3><figure class="highlight c#"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Club</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Club</span>()</span></span><br><span class="line">    {</span><br><span class="line">        Players = <span class="keyword">new</span> List&lt;Player&gt;();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> City { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="comment">//规定这一列为Date格式</span></span><br><span class="line">    [<span class="meta">Column(TypeName = <span class="string">"date"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> DateTime DateofEstablishment { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> History { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> League League { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> List&lt;Player&gt; Players { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Game</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Game</span>()</span> {</span><br><span class="line">        GamePlayers = <span class="keyword">new</span> List&lt;GamePlayer&gt;();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Round { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> DateTimeOffset? StartTime { <span class="keyword">set</span>; <span class="keyword">get</span>; }</span><br><span class="line">    <span class="keyword">public</span> List&lt;GamePlayer&gt; GamePlayers { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">League</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id { <span class="keyword">get</span>; <span class="keyword">set</span>;}</span><br><span class="line">    <span class="comment">//非空 长度为100</span></span><br><span class="line">    [<span class="meta">Required,MaxLength(100)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="comment">//非空 长度为100</span></span><br><span class="line">    [<span class="meta">Required, MaxLength(100)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Country { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Player</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span>()</span> {</span><br><span class="line">        GamePlayers = <span class="keyword">new</span> List&lt;GamePlayer&gt;();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Column(TypeName = <span class="string">"date"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> DateTime DateofBirth { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;GamePlayer&gt; GamePlayers { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> ResumeId { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> Resume Resume { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Resume</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Description { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> PlayerId { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> Player Player { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>4、在Demo.Date添加数据库配置类</p><figure class="highlight c#"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoContext</span> :<span class="title">DbContext</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConfiguring</span>(<span class="params">DbContextOptionsBuilder optionsBuilder</span>)</span></span><br><span class="line">    { </span><br><span class="line">        optionsBuilder</span><br><span class="line">            <span class="comment">//配置日志工厂</span></span><br><span class="line">            .UseLoggerFactory(ConsoleLoggerFactory)</span><br><span class="line">            <span class="comment">// 输出sql语句参数</span></span><br><span class="line">            .EnableSensitiveDataLogging()</span><br><span class="line">            .UseMySql(<span class="string">"server=127.0.0.1;port=3306;database=football;userid=root;password=123456"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder modelBuilder</span>)</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//配置多对多外键</span></span><br><span class="line">        modelBuilder.Entity&lt;GamePlayer&gt;().HasKey(x =&gt; <span class="keyword">new</span> { x.PlayerId, x.GameId  });</span><br><span class="line">        <span class="comment">//配置一对一 主键</span></span><br><span class="line">        modelBuilder.Entity&lt;Resume&gt;().HasOne(x =&gt; x.Player)</span><br><span class="line">            <span class="comment">// 配置 被约束表</span></span><br><span class="line">            .WithOne(x =&gt; x.Resume)</span><br><span class="line">            .HasForeignKey&lt;Resume&gt;(x =&gt; x.PlayerId);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//添加sql语句输出工厂类（类似于  @Bean）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> ILoggerFactory ConsoleLoggerFactory = LoggerFactory.Create(builder =&gt;</span><br><span class="line">    {</span><br><span class="line">        builder.AddFilter((category, level) =&gt;</span><br><span class="line">        category == DbLoggerCategory.Database.Command.Name &amp;&amp; level == LogLevel.Information).AddConsole(); ;</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;League&gt; Leagues { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Club&gt; Clubs { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Player&gt; Players { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5、在Nuget管理控制台输入相关命令，生成数据表"><a href="#5、在Nuget管理控制台输入相关命令，生成数据表" class="headerlink" title="5、在Nuget管理控制台输入相关命令，生成数据表"></a>5、在Nuget管理控制台输入相关命令，生成数据表</h3><figure class="highlight dos"><table><tbody><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">Add-Migration [名字]</span><br><span class="line"></span><br><span class="line">Update-Datebase</span><br></pre></td></tr></tbody></table></figure><img src="/2022/07/27/EFCore%E5%AD%A6%E4%B9%A0/07/27/EFCore%E5%AD%A6%E4%B9%A0/EFCore%E7%94%9F%E6%88%90%E8%A1%A8.png" class="" title="EFCore生成表"><h2 id="二、具体操作"><a href="#二、具体操作" class="headerlink" title="二、具体操作"></a>二、具体操作</h2><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><h4 id="1、增加"><a href="#1、增加" class="headerlink" title="1、增加"></a>1、增加</h4><p>增加一共有三种方式添加，通过调用DbContext中的 Add</p><figure class="highlight c#"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> SerieA = <span class="keyword">new</span> League</span><br><span class="line">{</span><br><span class="line">    Country = <span class="string">"Italy"</span>,</span><br><span class="line">    Name = <span class="string">"Serie A"</span></span><br><span class="line">};</span><br><span class="line">context.Leagues.Add(SerieA);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> SerieB = <span class="keyword">new</span> League { Name = <span class="string">"Serie B"</span>, Country = <span class="string">"Italy"</span> };</span><br><span class="line"><span class="keyword">var</span> SerieC = <span class="keyword">new</span> League { Name = <span class="string">"Serie C"</span>, Country = <span class="string">"Italy"</span> };</span><br><span class="line">context.Leagues.AddRange(<span class="keyword">new</span> List&lt;League&gt; { SerieB, SerieC });</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> count = context.SaveChanges();</span><br><span class="line">Console.WriteLine(count);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="2、查询"><a href="#2、查询" class="headerlink" title="2、查询"></a>2、查询</h4><p>查询一共两种方式查询：</p><ul><li>通过Linq方法.ToList()，EFCore遇到ToList()语句就会执行SQL查询</li></ul><figure class="highlight c#"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> leagues = context.Leagues</span><br><span class="line">    .<span class="keyword">where</span>(x =&gt; x.Country == <span class="string">"Italy"</span>)</span><br><span class="line">    .ToList();</span><br></pre></td></tr></tbody></table></figure><ul><li>Linq查询表达式，查询结果与Linq方法是一样的(类似于sql查询语句)</li></ul><figure class="highlight c#"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> leagues2 = (<span class="keyword">from</span> lg <span class="keyword">in</span> context.leagues</span><br><span class="line">                <span class="keyword">where</span> lg.country == <span class="string">"italy"</span></span><br><span class="line">                <span class="keyword">select</span> lg).tolist();</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>延迟执行</strong></p><p>在.ToList()方法之前都是返回IQueryable类型</p><blockquote><p>IQueryable就是C#中Linq To SQL语句的返回类型，简单来说IQueryable就是可以叠加处理SQL语句，最后统一访问数据库，这个处理过程就叫<code>延迟执行</code>，这一步只是生成了SQL语句，并没有真正执行数据库查询</p></blockquote><p>查询方法</p><blockquote><p>常用的查询方法（看帮助文档）：<br>  ToList()，返回集合<br>  First()，返回（符合条件的第）一个数据，必须有一个数据，没有数据就会报错，方法中可以直接写条件，不需要Where()<br>  FirstOrDefaule()，返回（符合条件的第）一个数据，可以没有数据，方法中可以直接写条件，不需要Where()<br>  Single()，返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。<br>  SingleOrDefault()，返回序列中的唯一元素；如果该序列为空，则返回默认值；如果该序列包含多个元素，此方法将引发异常。<br>  Last()<br>  LastOrDefaule()<br>实际应用中，经常使用OrDefault的方法</p><p>Find()，根据主键查找，属于DbSet的方法</p><p>Count()<br>LongCount()<br>Min()<br>Max()<br>Average()<br>Sum()</p><p>还有异步版本：<code>ToListAsync()</code>、<code>FirstAsync()</code></p></blockquote><p><strong>针对主键查询</strong></p><p>只会生成一次sql语句,因为context会追踪查询出来的数据，Find()再执行时，如果context能在内存里找到数据，那么就不会去数据库查询</p><p>只有Find()方法会这样执行</p><p><strong>模糊查询</strong><br>比如需要模糊sql查询条件</p><figure class="highlight c#"><table><tbody><tr><td class="code"><pre><span class="line">SELECT * FROM Leagues WHERE Country LIKE N<span class="string">'%中%'</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//第一种 模糊查询</span></span><br><span class="line"><span class="keyword">var</span> leagues = _dbContext.Leagues</span><br><span class="line">    .Where(l =&gt; l.Country.Contains(<span class="string">"中"</span>))<span class="comment">//查询条件</span></span><br><span class="line">    .ToList();</span><br><span class="line"><span class="comment">//第二种 模糊查询</span></span><br><span class="line"><span class="keyword">var</span> league_ef = _dbContext.Leagues</span><br><span class="line">    .Where(l =&gt; EF.Functions.Like(l.Country, <span class="string">"中%"</span>))</span><br><span class="line">    .ToList();</span><br></pre></td></tr></tbody></table></figure><p><strong>查询单个</strong></p><figure class="highlight c#"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="comment">//第一种</span></span><br><span class="line"><span class="keyword">var</span> leagues = _dbContext.Leagues.SingleOrDefault(l =&gt; l.Id == _id);</span><br><span class="line"> <span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">var</span> league2 = _dbContext.Leagues.Find(_id);</span><br></pre></td></tr></tbody></table></figure><h4 id="3、删除"><a href="#3、删除" class="headerlink" title="3、删除"></a>3、删除</h4><p>删除时，只能删除被追踪的数据。</p><p>一共用4中删除方法</p><figure class="highlight c#"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> context = <span class="keyword">new</span> DemoContext();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> milan = context.Clubs.Single(x =&gt; x.Name == <span class="string">"AC Milan"</span>);</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line">context.Clubs.Remove(milan);</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">context.Remove(milan);</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">context.Clubs.RemoveRange(milan, milan);</span><br><span class="line"><span class="comment">//4</span></span><br><span class="line">context.RemoveRange(milan,milan);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> count = context.SaveChanges();</span><br><span class="line">Console.WriteLine(count);</span><br></pre></td></tr></tbody></table></figure><h4 id="4、更新"><a href="#4、更新" class="headerlink" title="4、更新"></a>4、更新</h4><p>更新和删除一样只能对被追踪的数据进行修改。如果需要对没有被追踪的数据进行修改，需要调用context.Update（）方法</p><figure class="highlight c#"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UpdateOne</span>()</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> context = <span class="keyword">new</span> DemoContext();</span><br><span class="line">    <span class="keyword">var</span> league = context.Leagues.Where(x =&gt; x.Name == <span class="string">"Serie B"</span>).FirstOrDefault();</span><br><span class="line">    Object count = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (league != <span class="literal">null</span>)</span><br><span class="line">    {</span><br><span class="line">        league.Name += <span class="string">"~~"</span>;</span><br><span class="line">        count = context.SaveChanges();</span><br><span class="line">    }</span><br><span class="line">    Console.WriteLine(count);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UpdateAll</span>()</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> context = <span class="keyword">new</span> DemoContext();</span><br><span class="line">    <span class="comment">//AsNoTracking 不进行追踪</span></span><br><span class="line">    <span class="keyword">var</span> Leagues = context.Leagues</span><br><span class="line">        .AsNoTracking()</span><br><span class="line">        .Skip(<span class="number">1</span>)</span><br><span class="line">        .Take(<span class="number">2</span>).ToList();</span><br><span class="line">    Leagues.ForEach(league =&gt; league.Name += <span class="string">"++"</span>);</span><br><span class="line">    context.Leagues.UpdateRange(Leagues) ;</span><br><span class="line">    <span class="keyword">var</span> count = context.SaveChanges();</span><br><span class="line">    Console.WriteLine(count);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h3><h4 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h4><p>一对多查询需要用到include 的函数</p><figure class="highlight c#"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetOneToMany</span>()</span> {</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>多表查询</strong></p><table><thead><tr><th>方法</th><th>有主键</th><th>没有主键</th></tr></thead><tbody><tr><td>Add</td><td>添加数据（主键不能重复）</td><td>添加数据</td></tr><tr><td>Update</td><td>修改数据库中的数据</td><td>添加数据</td></tr><tr><td>Attach</td><td>不变化</td><td>添加数据</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> EFCore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#语法糖</title>
      <link href="/2022/07/27/C#%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
      <url>/2022/07/27/C#%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
      
        <content type="html"><![CDATA[<h1 id="C-语法糖"><a href="#C-语法糖" class="headerlink" title="C#语法糖"></a>C#语法糖</h1><p>首先需要声明的是“语法糖”这个词绝非贬义词，它可以给我带来方便，是一种便捷的写法，编译器会帮我们做转换；而且可以提高开发编码的效率，在性能上也不会带来损失。</p><h2 id="1．-经过简化的Property"><a href="#1．-经过简化的Property" class="headerlink" title="1． 经过简化的Property"></a>1． 经过简化的Property</h2><p>早些时候我们这样声明Property</p><figure class="highlight c#"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> _myName;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> MyName</span><br><span class="line"> </span><br><span class="line">{ </span><br><span class="line">    <span class="keyword">get</span> { <span class="keyword">return</span> _myName;  }</span><br><span class="line">    <span class="keyword">set</span> { _myName = <span class="keyword">value</span>; }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>千篇一律的这样声明，没有多大意义，于是C#的设计人员将这个千篇一律的工作交给了编译器帮我们做了，我们现在可以这样声明</p><figure class="highlight c#"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> MyName { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br></pre></td></tr></tbody></table></figure><p>当然他不会牺牲灵活性，我们可以单独给get或者set设定访问限制符，例如</p><figure class="highlight c#"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> MyName { <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">internal</span> <span class="keyword">set</span>; }</span><br></pre></td></tr></tbody></table></figure><h2 id="2．-经过两次变异的委托写法"><a href="#2．-经过两次变异的委托写法" class="headerlink" title="2． 经过两次变异的委托写法"></a>2． 经过两次变异的委托写法</h2><p>net 1.1时我们不得不声明方法后才在委托中使用，在.net 2.0之后我们可以使用匿名委托，他不单可以简化写法，还可以在匿名委托中访问范围内的变量；再后来拉姆达表达式来了，写法就更简便了。</p><figure class="highlight c#"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"><span class="built_in">int</span> a</span>)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//定义方法委托</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DoIt</span>(<span class="params"><span class="built_in">int</span> a</span>)</span> {</span><br><span class="line">        Console.WriteLine(a);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HowtoDo</span>(<span class="params">DoSomething doMethod,<span class="built_in">int</span> a</span>)</span> {</span><br><span class="line">        doMethod(a);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> {</span><br><span class="line">        MyClass mc = <span class="keyword">new</span> MyClass();</span><br><span class="line">        <span class="comment">//调用定义的方法委托</span></span><br><span class="line">        mc.HowtoDo(<span class="keyword">new</span> DoSomething(mc.DoIt), <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">int</span> x = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//使用匿名委托</span></span><br><span class="line">        mc.HowtoDo(<span class="built_in">delegate</span>(<span class="built_in">int</span> a){</span><br><span class="line">            Console.WriteLine(a + x);</span><br><span class="line">        },<span class="number">10</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//使用lamda表达式</span></span><br><span class="line">        mc.HowtoDo(a=&gt;Console.WriteLine(a+x),<span class="number">10</span>);</span><br><span class="line"> </span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo - matery主题</title>
      <link href="/2022/07/27/hexo%20-%20matery%E4%B8%BB%E9%A2%98/"/>
      <url>/2022/07/27/hexo%20-%20matery%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-matery主题"><a href="#hexo-matery主题" class="headerlink" title="hexo - matery主题"></a>hexo - matery主题</h1><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p>感谢下面列出的贡献者，没有他们，hexo-theme-matery 不会这么完美。</p><ul><li><a href="https://github.com/HarborZeng">@HarborZeng</a></li><li><a href="https://github.com/shw2018">@shw2018</a></li><li><a href="https://github.com/L1cardo">@L1cardo</a></li><li><a href="https://github.com/Five-great">@Five-great</a></li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/blinkfox/hexo-theme-matery.git</span><br></pre></td></tr></tbody></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo new page <span class="string">"categories"</span></span><br></pre></td></tr></tbody></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 17:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo new page <span class="string">"tags"</span></span><br></pre></td></tr></tbody></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 18:23:38</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo new page <span class="string">"about"</span></span><br></pre></td></tr></tbody></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 17:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"about"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"about"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo new page <span class="string">"contact"</span></span><br></pre></td></tr></tbody></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">contact</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 17:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"contact"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"contact"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo new page <span class="string">"friends"</span></span><br></pre></td></tr></tbody></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">friends</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-12-12 21:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"friends"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"friends"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"avatar"</span><span class="punctuation">:</span> <span class="string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"码酱"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"introduction"</span><span class="punctuation">:</span> <span class="string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"url"</span><span class="punctuation">:</span> <span class="string">"http://luokangyuan.com/"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"title"</span><span class="punctuation">:</span> <span class="string">"前去学习"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"avatar"</span><span class="punctuation">:</span> <span class="string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"闪烁之狐"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"introduction"</span><span class="punctuation">:</span> <span class="string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"url"</span><span class="punctuation">:</span> <span class="string">"https://blinkfox.github.io/"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"title"</span><span class="punctuation">:</span> <span class="string">"前去学习"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"avatar"</span><span class="punctuation">:</span> <span class="string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"ja_rome"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"introduction"</span><span class="punctuation">:</span> <span class="string">"平凡的脚步也可以走出伟大的行程"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"url"</span><span class="punctuation">:</span> <span class="string">"https://me.csdn.net/jlh912008548"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"title"</span><span class="punctuation">:</span> <span class="string">"前去学习"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo new page 404</span><br></pre></td></tr></tbody></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="number">404</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 17:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"404"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"404"</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">"Oops～，我崩溃了！找不到你想要的页面 :("</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Index:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Tags:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/tags</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/categories</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-bookmark</span></span><br><span class="line">  <span class="attr">Archives:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/archives</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">About:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/about</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-user-circle</span></span><br><span class="line">  <span class="attr">Friends:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/friends</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-address-book</span></span><br></pre></td></tr></tbody></table></figure><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式</li></ol><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Index:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Tags:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/tags</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/categories</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-bookmark</span></span><br><span class="line">  <span class="attr">Archives:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/archives</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">About:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/about</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-user-circle-o</span></span><br><span class="line">  <span class="attr">Friends:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/friends</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-address-book</span></span><br><span class="line">  <span class="attr">Medias:</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-list</span></span><br><span class="line">    <span class="attr">children:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Music</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/music</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Movies</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/movies</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-film</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Books</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/books</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-book</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Galleries</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/galleries</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-image</span></span><br></pre></td></tr></tbody></table></figure><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">''</span></span><br></pre></td></tr></tbody></table></figure><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></tbody></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br></pre></td></tr></tbody></table></figure><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm i hexo-permalink-pinyin --save</span><br></pre></td></tr></tbody></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">permalink_pinyin:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">separator:</span> <span class="string">'-'</span> <span class="comment"># default: '-'</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></tbody></table></figure><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">postInfo:</span></span><br><span class="line">  <span class="attr">date:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">update:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">wordCount:</span> <span class="literal">false</span> <span class="comment"># 设置文章字数统计为 true.</span></span><br><span class="line">  <span class="attr">totalCount:</span> <span class="literal">false</span> <span class="comment"># 设置站点文章总字数统计为 true.</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">false</span> <span class="comment"># 阅读时长.</span></span><br><span class="line">  <span class="attr">readCount:</span> <span class="literal">false</span> <span class="comment"># 阅读次数.</span></span><br></pre></td></tr></tbody></table></figure><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-filter-github-emojis --save</span><br></pre></td></tr></tbody></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">inject:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">customEmojis:</span></span><br></pre></td></tr></tbody></table></figure><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></tbody></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">' '</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></tbody></table></figure><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">&lt;% if (theme.socialLink.github) { %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%= theme.socialLink.github %&gt;"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"访问我的GitHub"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fab fa-github"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&lt;% } %&gt;</span><br></pre></td></tr></tbody></table></figure><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 是否在首页显示音乐</span></span><br><span class="line"><span class="attr">music:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span>         <span class="comment"># 非吸底模式有效</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">show:</span> <span class="string">听听音乐</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">netease</span>   <span class="comment"># require music platform: netease, tencent, kugou, xiami, baidu</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">playlist</span>    <span class="comment"># require song, playlist, album, search, artist</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">503838841</span>     <span class="comment"># require song id / playlist id / album id / search keyword</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">false</span>      <span class="comment"># 开启吸底模式</span></span><br><span class="line">  <span class="attr">autoplay:</span> <span class="literal">false</span>   <span class="comment"># 是否自动播放</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">'#42b983'</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="string">'all'</span>       <span class="comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span></span><br><span class="line">  <span class="attr">order:</span> <span class="string">'random'</span>   <span class="comment"># 音频循环顺序, 可选值: 'list', 'random'</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="string">'auto'</span>   <span class="comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span></span><br><span class="line">  <span class="attr">volume:</span> <span class="number">0.7</span>       <span class="comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span></span><br><span class="line">  <span class="attr">listFolded:</span> <span class="literal">true</span>  <span class="comment"># 列表默认折叠</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h3 id="添加note"><a href="#添加note" class="headerlink" title="添加note"></a>添加note</h3><blockquote><p><a href="https://blog.17lai.site/posts/cf0f47fd/#tag-note">演示</a></p></blockquote><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% note [class] [no-icon] [summary] %}</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>[class]</code> : <em>Optional parameter.</em> Supported values: default | primary | success | info | warning | danger.</li><li><code>[no-icon]</code> : <em>Optional parameter.</em> Disable icon in note.</li><li><code>[summary]</code> : <em>Optional parameter.</em> Optional summary of the note.</li></ul><p>All parameters are optional.</p><h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% note %}</span><br><span class="line">#### Header</span><br><span class="line">(without define class style)</span><br><span class="line">{% endnote %}</span><br></pre></td></tr></tbody></table></figure><h3 id="添加button"><a href="#添加button" class="headerlink" title="添加button"></a>添加button</h3><blockquote><p><a href="https://blog.17lai.site/posts/cf0f47fd/#tag-button">演示</a></p></blockquote><h4 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% button url, text, icon [class], [title] %}</span><br></pre></td></tr></tbody></table></figure><p>or</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% btn url, text, icon [class], [title] %}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>url</code> : Absolute or relative path to URL.</li><li><code>text</code> : Button text. Required if no icon specified.</li><li><code>icon</code> : Font Awesome icon name. Required if no text specified.</li><li><code>[class]</code> : <em>Optional parameter.</em> Font Awesome class(es): <code>fa-fw</code> | <code>fa-lg</code> | <code>fa-2x</code> | <code>fa-3x</code> | <code>fa-4x</code> | <code>fa-5x</code></li><li><code>[title]</code> : <em>Optional parameter.</em> Tooltip at mouseover.</li></ul><h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% button #, Text %}</span><br></pre></td></tr></tbody></table></figure><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">typora-vue-theme主题介绍</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-07 09:25:00</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">typora-vue-theme主题介绍</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-07 09:25:00</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">赵奇</span></span><br><span class="line"><span class="attr">img:</span> <span class="string">/source/images/xxx.jpg</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">cover:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">coverImg:</span> <span class="string">/images/1.jpg</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">summary:</span> <span class="string">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Markdown</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Typora</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Markdown</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p>![matery-20181202-1](hexo - matery主题/matery-20181202-1.png)</p><p>![matery-20181202-2](hexo - matery主题/matery-20181202-2.png)</p><p>![matery-20181202-3](hexo - matery主题/matery-20181202-3.png)</p><p>![matery-20181202-7](hexo - matery主题/matery-20181202-7.png)</p><p>![matery-20181202-8](hexo - matery主题/matery-20181202-8.png)</p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span></span><br><span class="line"><span class="selector-class">.bg-color</span> {</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#4cbf30</span> <span class="number">0%</span>, <span class="number">#0f9d58</span> <span class="number">100%</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> rainbow {</span><br><span class="line">   <span class="comment">/* 动态切换背景颜色. */</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> rainbow {</span><br><span class="line">    <span class="comment">/* 动态切换背景颜色. */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">$(<span class="string">'.bg-cover'</span>).<span class="title function_">css</span>(<span class="string">'background-image'</span>, <span class="string">'url(/medias/banner/'</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDay</span>() + <span class="string">'.jpg)'</span>);</span><br></pre></td></tr></tbody></table></figure><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本变更记录"><a href="#版本变更记录" class="headerlink" title="版本变更记录"></a>版本变更记录</h2><p>参见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/CHANGELOG.md">CHANGELOG.md</a></p><h2 id="更多部署方式"><a href="#更多部署方式" class="headerlink" title="更多部署方式"></a>更多部署方式</h2><blockquote><p>Jsdelivr 已经被封了，这两个可以加速访问快一点</p></blockquote><h3 id="vercel-部署"><a href="#vercel-部署" class="headerlink" title="vercel 部署"></a><a href="https://blog.17lai.site/posts/5311b619/#vercel-%E9%83%A8%E7%BD%B2">vercel 部署</a></h3><h3 id="cloudflare-Pages-部署"><a href="#cloudflare-Pages-部署" class="headerlink" title="cloudflare Pages 部署"></a><a href="https://blog.17lai.site/posts/5311b619/#cloudflare-Pages-%E9%83%A8%E7%BD%B2">cloudflare Pages 部署</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
